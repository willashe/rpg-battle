{"version":3,"sources":["constants.ts","actions/actionTypes.ts","actions/actionCreators.ts","utils.ts","actions/thunks.ts","state/reducer.ts","state/state.tsx","pages/Title.tsx","data/weapons.ts","data/shields.ts","data/armor.ts","data/techniques.ts","data/heroes.ts","data/items.ts","data/enemies.ts","components/Window.tsx","pages/NewGame.tsx","components/Battle/EnemyGroup.tsx","components/Battle/EnemyInfo.tsx","components/Dissolve.tsx","components/AnimatedSprite.tsx","components/Battle/BattleAnimation.tsx","components/Battle/GameMenu.tsx","components/Sprite.tsx","components/Battle/HeroMenu.tsx","components/Battle/HeroCard.tsx","components/Battle/HeroInfo.tsx","components/Battle/Battle.tsx","components/Battle/index.ts","pages/Battle.tsx","pages/About.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameStatesEnum","ANIMATION_DURATION_MAP","IDLE","SLASH","SHOOT","USE","TARGETED","HURT","DYING","GroupsEnum","INIT","NEW_GAME","GAME_WON","GAME_LOST","PLAYER_INPUT","EXECUTING","POST_EXECUTION","EntityTypesEnum","PLAYER_GROUP","LEFT_ENEMY_GROUP","RIGHT_ENEMY_GROUP","EntityStatusesEnum","HUMAN","NUMAN","MONSTER","ROBOT","EntityActionTypesEnum","OK","DEAD","PARALYZED","POISONED","AnimationTypesEnum","ATTACK","TECH","ITEM","DEFEND","HeroesEnum","EnemyTypesEnum","ROLF","RUDO","NEI","AMY","TargetTypesEnum","FROGGY","WRESTLER","DARKFORCE","ArmorTypesEnum","ENTITY","GROUP","ALL","EffectTypesEnum","HEAD","BODY","LEGS","DAMAGE","HEAL","POISON","PARALYZE","SLEEP","SET_PIXEL_MULTIPLIER","START_NEW_GAME","START_NEW_ROUND","WIN_GAME","LOSE_GAME","SET_QUEUE_INDEX","INCREMENT_QUEUE_INDEX","SET_GAME_STATE","SET_PLAYER_INTERRUPT","QUEUE_ACTION","SET_GROUP_MESSAGE","SET_ENTITY_STATUS","SET_ENTITY_ANIMATION","UPDATE_ENTITY_HP","UPDATE_ENTITY_TP","REMOVE_ENTITY_ITEM","setPixelMultiplier","multiplier","type","payload","startNewGame","newGameState","startNewRound","queue","winGame","loseGame","setQueueIndex","index","incrementQueueIndex","setGameState","state","setPlayerInterrupt","interrupt","queueAction","_ref","heroIndex","target","techIndex","itemIndex","setGroupMessage","_ref2","message","setEntityStatus","status","setEntityAnimation","animation","updateEntityHP","offset","updateEntityTP","removeEntityItem","generateEntityAnimations","isEnemy","_defineProperty","frames","duration","top","undefined","bottom","sortEntitiesBySpeed","firstEntity","secondEntity","speedA","speed","speedB","Math","random","generateQueue","entities","_toConsumableArray","sort","map","entity","group","queuedAction","leftPosition","actor","reduce","prev","curr","concat","retarget","groups","actorGroup","targetGroup","targetIndex","Array","isArray","filter","findIndex","_ref3","hp","_ref4","livingTargetGroupEntities","length","floor","getTargetLeftPosition","String","Number","replace","timeout","ms","Promise","resolve","setTimeout","newGameThunk","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","wrap","_context","next","stop","_x","apply","arguments","attackThunk","initialTarget","_callee2","getState","_getState","actorIndex","actorEntity","_actorEntity$equipmen","leftHand","rightHand","initialTargetGroup","initialTargetIndex","attackAnimationType","targetLeftPosition","attackPower","crit","_context2","equipment","twoHanded","attackType","left","_x2","_x3","techThunk","_callee3","_getState2","techniques","techData","name","effect","power","tp","selfTargeting","_context3","abrupt","t0","_x4","_x5","itemThunk","_ref5","_callee4","_getState3","inventory","itemData","_ref6","itemEffect","itemPower","consumable","_context4","_x6","_x7","postExecutionThunk","_ref7","_callee5","_getState4","_getState4$groups","playerGroup","leftEnemyGroup","rightEnemyGroup","livingHeroes","livingLeft","livingRight","_iterator","_step","_step$value","hero","currentAnimation","_iterator2","_step2","_step2$value","_index","enemy","_status","_currentAnimation","_iterator3","_step3","_step3$value","_index2","_enemy","_status2","_currentAnimation2","_context5","_createForOfIteratorHelper","entries","s","n","done","_slicedToArray","value","e","f","finish","t1","t2","_x8","_x9","actionTypes","reducer","action","_objectSpread","pixelMultiplier","gameState","queueIndex","playerInterrupt","newGroups","forEach","_payload$target","groupName","newGroupEntities","newEntity","slice","_payload$target2","newAnimation","_payload$target3","min","maxHp","_payload$target4","newInventory","splice","initialState","_groups","AppStateContext","createContext","AppStateProvider","children","_useReducer","useReducer","_useReducer2","prevState","useRef","customDispatch","useCallback","current","_jsx","Provider","TitleContainer","styled","div","_templateObject","_taggedTemplateLiteral","TitleMenu","props","_templateObject2","Title","_jsxs","Link","to","WEAPONS","KNIFE","targetType","equippableBy","STEEL_BAR","defensePower","SHOTGUN","SHIELDS","CARBON_EMEL","CARBON_SHIELD","ARMOR","HEADGEAR","RIBBON","ITEMS","RES","targetAllies","FOI","GIFOI","LIGHTNING","MONOMATE","itemTargetType","itemTargetAllies","TECHNIQUES","HERO_DATA","_HERO_DATA","maxTp","attack","defense","head","animations","ENEMY_DATA","_ENEMY_DATA","size","height","width","Container","Corner","Side","_templateObject3","TopBottom","_templateObject4","Window","_useContext","useContext","style","backgroundImage","right","startNewGameAction","actionCreators","Button","NewGameMenu","history","useHistory","_useContext3","_useState","useState","_useState2","heroes","setHeroes","_useState3","_useState4","leftEnemyType","setLeftEnemyType","_useState5","_useState6","leftEnemyCount","setLeftEnemyCount","_useState7","_useState8","rightEnemyType","setRightEnemyType","_useState9","_useState10","rightEnemyCount","setRightEnemyCount","totalEnemyCount","leftSlots","ENEMIES","rightSlots","freeSlots","position","transform","padding","zIndex","marginBottom","margin","display","justifyContent","textAlign","onClick","newHeroes","indexOf","minWidth","heroName","cursor","push","Object","values","onChange","enemyType","id","max","disabled","newGameData","HEROES","uuid","from","el","textDecoration","EnemyGroupContainer","EnemyGroupName","EnemyMessage","EnemyGroup","EnemyInfoContainer","section","EnemyInfo","_state$groups","_Fragment","dissolveAnimation","keyframes","DissolveContainer","dissolving","reverse","Dissolve","_ref8","SpriteContainer","spriteImg","css","_templateObject5","frame","toFixed","spriteAnimation","AnimatedSprite","BattleSpriteContainer","EnemySpriteContainer","PlayerSpriteContainer","MessageBox","BattleAnimation","combinedEnemies","animationType","_ref2$frames","_ref2$duration","toLowerCase","visibility","_ref4$frames","_ref4$duration","_ref4$top","_ref4$bottom","Boolean","GameMenu","handleClose","_useContext2","Sprite","src","alt","ActiveHeroWindow","ActionMenu","TechMenu","ItemMenu","TargetMenu","_templateObject6","Menu","ul","_templateObject7","MenuItem","_templateObject8","active","HeroMenu","_rightEnemyGroup$enti4","activeHero","actionType","setActionType","setItemIndex","setTechIndex","activeHeroIndex","_activeHero$equipment","attackTargetType","activeTech","activeItem","useEffect","handleEsc","event","key","window","addEventListener","removeEventListener","_rightEnemyGroup$enti","_rightEnemyGroup$enti2","_rightEnemyGroup$enti3","technique","item","HeroCardContainer","HeroButton","HeroCard","handleSelect","order","alignItems","startNewRoundAction","HeroInfoContainer","PlayerButtons","PlayerButton","button","PlayerInfo","setActiveHeroIndex","gameMenuOpen","setGameMenuOpen","handleSelectHero","newQueue","BattleContainer","flashAnimation","BattleWindow","bgFlash","Battle","setBgFlash","find","HeroInfo","thunks","BattlePage","prevQueueIndex","prevGameState","_queue$queueIndex","Content","ContactInfo","IconLink","a","About","maxWidth","href","rel","AppContainer","slideAnimation","App","handleResize","innerWidth","innerHeight","Router","Switch","Route","exact","path","component","NewGame","Redirect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8b1ad88.chunk.js","sourcesContent":["export const ANIMATION_DURATION_MAP = {\n  IDLE: 600,\n  SLASH: 600,\n  SHOOT: 1000,\n  USE: 1000,\n  TARGETED: 600,\n  HURT: 1000,\n  DYING: 150,\n};\n\nexport enum GameStatesEnum {\n  INIT = 'INIT',\n  NEW_GAME = 'NEW_GAME',\n  GAME_WON = 'GAME_WON',\n  GAME_LOST = 'GAME_LOST',\n  PLAYER_INPUT = 'PLAYER_INPUT',\n  EXECUTING = 'EXECUTING',\n  POST_EXECUTION = 'POST_EXECUTION',\n}\nexport const {\n  INIT,\n  NEW_GAME,\n  GAME_WON,\n  GAME_LOST,\n  PLAYER_INPUT,\n  EXECUTING,\n  POST_EXECUTION,\n} = GameStatesEnum;\n\nexport enum GroupsEnum {\n  PLAYER_GROUP = 'PLAYER_GROUP',\n  LEFT_ENEMY_GROUP = 'LEFT_ENEMY_GROUP',\n  RIGHT_ENEMY_GROUP = 'RIGHT_ENEMY_GROUP',\n}\nexport const { PLAYER_GROUP, LEFT_ENEMY_GROUP, RIGHT_ENEMY_GROUP } = GroupsEnum;\n\nexport enum EntityTypesEnum {\n  HUMAN = 'HUMAN',\n  NUMAN = 'NUMAN',\n  MONSTER = 'MONSTER',\n  ROBOT = 'ROBOT',\n}\nexport const { HUMAN, NUMAN, MONSTER, ROBOT } = EntityTypesEnum;\n\nexport enum EntityStatusesEnum {\n  OK = 'OK',\n  DEAD = 'DEAD',\n  PARALYZED = 'PARALYZED',\n  POISONED = 'POISONED',\n}\nexport const { OK, DEAD, PARALYZED, POISONED } = EntityStatusesEnum;\n\nexport enum EntityActionTypesEnum {\n  ATTACK = 'ATTACK',\n  TECH = 'TECH',\n  ITEM = 'ITEM',\n  DEFEND = 'DEFEND',\n}\nexport const { ATTACK, TECH, ITEM, DEFEND } = EntityActionTypesEnum;\n\nexport enum AnimationTypesEnum {\n  IDLE = 'IDLE',\n  SLASH = 'SLASH',\n  SHOOT = 'SHOOT',\n  USE = 'USE',\n  TARGETED = 'TARGETED',\n  HURT = 'HURT',\n  DYING = 'DYING',\n}\nexport const { IDLE, SLASH, SHOOT, USE, TARGETED, HURT, DYING } =\n  AnimationTypesEnum;\n\nexport const HERO_NAMES = ['ROLF', 'RUDO', 'NEI', 'AMY'];\nexport enum HeroesEnum {\n  ROLF = 'ROLF',\n  RUDO = 'RUDO',\n  NEI = 'NEI',\n  AMY = 'AMY',\n}\nexport const { ROLF, RUDO, NEI, AMY } = HeroesEnum;\n\nexport enum EnemyTypesEnum {\n  FROGGY = 'FROGGY',\n  WRESTLER = 'WRESTLER',\n  DARKFORCE = 'DARKFORCE',\n}\nexport const { FROGGY, WRESTLER, DARKFORCE } = EnemyTypesEnum;\n\nexport enum TargetTypesEnum {\n  ENTITY = 'ENTITY',\n  GROUP = 'GROUP',\n  ALL = 'ALL',\n}\nexport const { ENTITY, GROUP, ALL } = TargetTypesEnum;\n\nexport enum ArmorTypesEnum {\n  HEAD = 'HEAD',\n  BODY = 'BODY',\n  LEGS = 'LEGS',\n}\nexport const { HEAD, BODY, LEGS } = ArmorTypesEnum;\n\nexport enum EffectTypesEnum {\n  DAMAGE = 'DAMAGE',\n  HEAL = 'HEAL',\n  POISON = 'POISON',\n  PARALYZE = 'PARALYZE',\n  SLEEP = 'SLEEP',\n}\nexport const { DAMAGE, HEAL, POISON, PARALYZE, SLEEP } = EffectTypesEnum;\n","export const SET_PIXEL_MULTIPLIER = 'SET_PIXEL_MULTIPLIER';\n\nexport const START_NEW_GAME = 'START_NEW_GAME';\nexport const START_NEW_ROUND = 'START_NEW_ROUND';\nexport const WIN_GAME = 'WIN_GAME';\nexport const LOSE_GAME = 'LOSE_GAME';\n\nexport const SET_QUEUE_INDEX = 'SET_QUEUE_INDEX';\nexport const INCREMENT_QUEUE_INDEX = 'INCREMENT_QUEUE_INDEX';\nexport const SET_GAME_STATE = 'SET_GAME_STATE';\nexport const SET_PLAYER_INTERRUPT = 'SET_PLAYER_INTERRUPT';\nexport const QUEUE_ACTION = 'QUEUE_ACTION';\n\nexport const SET_GROUP_MESSAGE = 'SET_GROUP_MESSAGE';\nexport const SET_ENTITY_STATUS = 'SET_ENTITY_STATUS';\nexport const SET_ENTITY_ANIMATION = 'SET_ENTITY_ANIMATION';\nexport const UPDATE_ENTITY_HP = 'UPDATE_ENTITY_HP';\nexport const UPDATE_ENTITY_TP = 'UPDATE_ENTITY_TP';\nexport const REMOVE_ENTITY_ITEM = 'REMOVE_ENTITY_ITEM';\n","import {\n  SET_PIXEL_MULTIPLIER,\n  START_NEW_GAME,\n  START_NEW_ROUND,\n  WIN_GAME,\n  LOSE_GAME,\n  SET_QUEUE_INDEX,\n  INCREMENT_QUEUE_INDEX,\n  SET_GAME_STATE,\n  SET_PLAYER_INTERRUPT,\n  QUEUE_ACTION,\n  SET_GROUP_MESSAGE,\n  SET_ENTITY_ANIMATION,\n  SET_ENTITY_STATUS,\n  UPDATE_ENTITY_HP,\n  UPDATE_ENTITY_TP,\n  REMOVE_ENTITY_ITEM,\n} from './actionTypes';\nimport { TargetType, EntityActionType } from '../types';\nimport {\n  EntityActionTypesEnum,\n  AnimationTypesEnum,\n  EntityStatusesEnum,\n} from '../constants';\n\nexport const setPixelMultiplier = (multiplier: number) => ({\n  type: SET_PIXEL_MULTIPLIER,\n  payload: multiplier,\n});\n\n// TODO: ts\nexport const startNewGame = (newGameState: any) => ({\n  type: START_NEW_GAME,\n  payload: newGameState,\n});\n\nexport const startNewRound = (queue: EntityActionType[]) => ({\n  type: START_NEW_ROUND,\n  payload: queue,\n});\n\nexport const winGame = () => ({ type: WIN_GAME });\n\nexport const loseGame = () => ({ type: LOSE_GAME });\n\nexport const setQueueIndex = (index: number | null) => ({\n  type: SET_QUEUE_INDEX,\n  payload: index,\n});\n\nexport const incrementQueueIndex = () => ({\n  type: INCREMENT_QUEUE_INDEX,\n});\n\nexport const setGameState = (state: string) => ({\n  type: SET_GAME_STATE,\n  payload: state,\n});\n\nexport const setPlayerInterrupt = (interrupt: boolean) => ({\n  type: SET_PLAYER_INTERRUPT,\n  payload: interrupt,\n});\n\nexport const queueAction = ({\n  heroIndex,\n  target,\n  type,\n  techIndex,\n  itemIndex,\n}: {\n  heroIndex: number;\n  target?: TargetType;\n  type: EntityActionTypesEnum;\n  techIndex?: number;\n  itemIndex?: number;\n}) => ({\n  type: QUEUE_ACTION,\n  payload: {\n    heroIndex,\n    target,\n    type,\n    techIndex,\n    itemIndex,\n  },\n});\n\nexport const setGroupMessage = ({\n  target,\n  message,\n}: {\n  target: TargetType;\n  message: string | number;\n}) => ({\n  type: SET_GROUP_MESSAGE,\n  payload: { target, message },\n});\n\nexport const setEntityStatus = (\n  target: TargetType,\n  status: EntityStatusesEnum\n) => ({\n  type: SET_ENTITY_STATUS,\n  payload: { target, status },\n});\n\nexport const setEntityAnimation = (\n  target: TargetType,\n  animation:\n    | AnimationTypesEnum\n    | {\n        type: AnimationTypesEnum;\n        left?: number | string;\n      }\n) => ({\n  type: SET_ENTITY_ANIMATION,\n  payload: { target, animation },\n});\n\nexport const updateEntityHP = (target: TargetType, offset: number) => ({\n  type: UPDATE_ENTITY_HP,\n  payload: { target, offset },\n});\n\nexport const updateEntityTP = (target: TargetType, offset: number) => ({\n  type: UPDATE_ENTITY_TP,\n  payload: { target, offset },\n});\n\nexport const removeEntityItem = (target: TargetType, itemIndex: number) => ({\n  type: REMOVE_ENTITY_ITEM,\n  payload: { target, itemIndex },\n});\n","import { EntityType } from './types';\nimport {\n  IDLE,\n  SLASH,\n  SHOOT,\n  USE,\n  TARGETED,\n  HURT,\n  DYING,\n  GroupsEnum,\n  PLAYER_GROUP,\n  LEFT_ENEMY_GROUP,\n  RIGHT_ENEMY_GROUP,\n} from './constants';\n\nexport const generateEntity = ({\n  id,\n  index,\n  group,\n  type,\n  status,\n  name,\n  maxHp,\n  hp,\n  maxTp,\n  tp,\n  attack,\n  defense,\n  speed,\n  inventory,\n  techniques,\n  leftPosition,\n  queuedAction,\n  currentAnimation,\n  animations,\n}: EntityType) => ({\n  id,\n  index,\n  group,\n  type,\n  status,\n  name,\n  maxHp,\n  hp,\n  maxTp,\n  tp,\n  attack,\n  defense,\n  speed,\n  inventory,\n  techniques,\n  leftPosition,\n  queuedAction,\n  currentAnimation,\n  animations,\n});\n\nexport const generateEntityAnimations = (isEnemy: boolean) => ({\n  [IDLE]: {\n    frames: isEnemy ? [0, 1] : 0,\n    duration: isEnemy ? 600 : 0,\n    top: isEnemy ? 0 : undefined,\n    bottom: isEnemy ? undefined : 0,\n  },\n  [SLASH]: {\n    frames: isEnemy ? [2, 3] : [3, 3, 4, 5, 6, 6],\n    duration: 600,\n    top: isEnemy ? 0 : '20%',\n    bottom: isEnemy ? undefined : 0,\n  },\n  [SHOOT]: {\n    frames: [0, 2, 2],\n    duration: 1000,\n    top: isEnemy ? 0 : undefined,\n    bottom: isEnemy ? undefined : 0,\n  },\n  [USE]: {\n    frames: [0, 1, 1, 1, 1, 1, 1, 1, 1],\n    duration: 2000,\n    top: isEnemy ? 0 : undefined,\n    bottom: isEnemy ? undefined : 0,\n  },\n  [TARGETED]: {\n    frames: isEnemy ? [0, 1] : 0,\n    duration: isEnemy ? 600 : 0,\n    top: isEnemy ? 0 : undefined,\n    bottom: isEnemy ? undefined : 0,\n  },\n  [HURT]: {\n    frames: [0, -1, 0, -1, 0, -1, 0],\n    duration: 1000,\n    top: isEnemy ? 0 : undefined,\n    bottom: isEnemy ? undefined : 0,\n  },\n  [DYING]: {\n    frames: 0,\n    duration: 150,\n    top: isEnemy ? 0 : undefined,\n    bottom: isEnemy ? undefined : 0,\n  },\n});\n\nexport const sortEntitiesBySpeed = (\n  firstEntity: EntityType,\n  secondEntity: EntityType\n) => {\n  const { speed: speedA } = firstEntity;\n  const { speed: speedB } = secondEntity;\n\n  if (speedA === speedB) {\n    return Math.random() > 0.5 ? 1 : -1;\n  } else {\n    return speedA > speedB ? -1 : 1;\n  }\n};\n\nexport const generateQueue = (entities: EntityType[]) => {\n  return [...entities]\n    .sort(sortEntitiesBySpeed)\n    .map((entity) => {\n      const { index, group, queuedAction, leftPosition } = entity;\n      const { type, target, techIndex, itemIndex } = queuedAction;\n\n      // TODO: check equipped weapons, etc. determine what kind of action or actions to queue\n\n      const action = {\n        type,\n        actor: { group, index, leftPosition },\n        target,\n        techIndex,\n        itemIndex,\n      };\n      return [action];\n    })\n    .reduce((prev, curr) => [...prev, ...curr], []);\n};\n\nexport const retarget = (\n  groups: any, // TODO: ts\n  actorGroup: GroupsEnum,\n  targetGroup: GroupsEnum | GroupsEnum[],\n  targetIndex?: number\n) => {\n  // retargeting logic\n  if (Array.isArray(targetGroup)) {\n    targetGroup.filter(\n      (group) =>\n        groups[group].entities.findIndex(({ hp }: { hp: number }) => hp > 0) !==\n        -1\n    );\n    // TODO: if no living entities in any target group maybe add some sort of skip flag to check below so we only show actor animation with no other effects\n  } else if (targetIndex === undefined) {\n    if (targetGroup !== PLAYER_GROUP) {\n      if (\n        groups[targetGroup].entities.findIndex(\n          ({ hp }: { hp: number }) => hp > 0\n        ) === -1\n      ) {\n        targetGroup =\n          targetGroup === LEFT_ENEMY_GROUP\n            ? RIGHT_ENEMY_GROUP\n            : LEFT_ENEMY_GROUP;\n      }\n    }\n  } else {\n    // TODO: this is hacky, we are checking to see if we have an index, then ignoring it and picking a random one\n    let livingTargetGroupEntities = groups[targetGroup].entities.filter(\n      (entity: EntityType) => entity.hp > 0\n    );\n\n    if (actorGroup === PLAYER_GROUP && livingTargetGroupEntities.length === 0) {\n      targetGroup =\n        targetGroup === LEFT_ENEMY_GROUP ? RIGHT_ENEMY_GROUP : LEFT_ENEMY_GROUP;\n\n      livingTargetGroupEntities = groups[targetGroup].entities.filter(\n        (entity: EntityType) => entity.hp > 0\n      );\n    }\n\n    targetIndex =\n      livingTargetGroupEntities[\n        Math.floor(Math.random() * livingTargetGroupEntities.length)\n      ].index;\n  }\n\n  const newTarget = {\n    group: targetGroup,\n    index: targetIndex,\n  };\n\n  return newTarget;\n};\n\n// TODO: need to consider only living entities\nexport const getTargetLeftPosition = (\n  groups: any, // TODO: ts\n  targetGroup: GroupsEnum | GroupsEnum[],\n  targetIndex?: number\n) => {\n  // TODO: yeaaaa... we need to handle leftPosition percentage another way\n  return targetIndex !== undefined && !Array.isArray(targetGroup)\n    ? groups[targetGroup].entities[targetIndex].leftPosition\n    : !Array.isArray(targetGroup)\n    ? String(\n        (Number(groups[targetGroup].entities[0].leftPosition.replace('%', '')) +\n          Number(\n            groups[targetGroup].entities[\n              groups[targetGroup].entities.length - 1\n            ].leftPosition.replace('%', '')\n          )) /\n          2\n      ) + '%'\n    : '50%';\n};\n","import { Dispatch } from 'react';\nimport { ActionType, TargetType, ActorType } from '../types';\nimport {\n  EXECUTING,\n  POST_EXECUTION,\n  TARGETED,\n  IDLE,\n  HURT,\n  DYING,\n  DEAD,\n  OK,\n  PLAYER_GROUP,\n  RIGHT_ENEMY_GROUP,\n  LEFT_ENEMY_GROUP,\n  SLASH,\n  ANIMATION_DURATION_MAP,\n  AnimationTypesEnum,\n  USE,\n  DAMAGE,\n  HEAL,\n  POISON,\n  PARALYZE,\n  SLEEP,\n} from '../constants';\nimport {\n  setGameState,\n  setEntityAnimation,\n  setEntityStatus,\n  setGroupMessage,\n  updateEntityHP,\n  updateEntityTP,\n  loseGame,\n  winGame,\n  incrementQueueIndex,\n  removeEntityItem,\n} from './actionCreators';\nimport { getTargetLeftPosition, retarget } from '../utils';\n\n// TODO: pass getState to this function and call it right before resolving to see if new game has started and stop triggering more animations if so\nfunction timeout(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport const newGameThunk = () => async (dispatch: Dispatch<ActionType>) => {\n  await timeout(3000);\n  dispatch(setGameState(EXECUTING));\n};\n\nexport const attackThunk =\n  (actor: ActorType, initialTarget: TargetType) =>\n  async (dispatch: Dispatch<ActionType>, getState: any) => {\n    const { groups } = getState();\n\n    const { group: actorGroup, index: actorIndex } = actor;\n    const actorEntity = groups[actorGroup].entities[actorIndex];\n    const {\n      equipment: { leftHand, rightHand },\n    } = actorEntity;\n\n    let { group: initialTargetGroup, index: initialTargetIndex } =\n      initialTarget;\n\n    const target = retarget(\n      groups,\n      actorGroup,\n      initialTargetGroup,\n      initialTargetIndex\n    );\n    const { group: targetGroup, index: targetIndex } = target;\n\n    const attackAnimationType: AnimationTypesEnum =\n      leftHand && 'twoHanded' in leftHand && leftHand.twoHanded\n        ? leftHand.attackType\n        : leftHand && 'attackType' in leftHand\n        ? leftHand.attackType\n        : rightHand && 'attackType' in rightHand\n        ? rightHand.attackType\n        : SLASH;\n\n    const targetLeftPosition = getTargetLeftPosition(\n      groups,\n      targetGroup,\n      targetIndex\n    );\n\n    dispatch(\n      setEntityAnimation(actor, {\n        type: attackAnimationType,\n        left: targetLeftPosition,\n      })\n    );\n    dispatch(\n      setEntityAnimation(target, {\n        type: TARGETED,\n        left:\n          targetGroup === PLAYER_GROUP && targetIndex !== undefined\n            ? actorEntity.leftPosition\n            : undefined,\n      })\n    );\n    await timeout(ANIMATION_DURATION_MAP[attackAnimationType]);\n    dispatch(setEntityAnimation(actor, IDLE));\n\n    // TODO: use full actor and target entities from state to determine who gets hit and for how much\n    // TODO: loop over target group if array\n    // TODO: check to see if targets are currently defending\n    const attackPower = Math.floor(Math.random() * 5);\n    let crit = false;\n    if (Math.random() > 0.85) {\n      crit = true;\n    }\n\n    if (attackPower > 0) {\n      if (crit) {\n        dispatch(\n          setGroupMessage({\n            target: { group: PLAYER_GROUP },\n            message: 'terrific blow!!!',\n          })\n        );\n      }\n      if (actorGroup === PLAYER_GROUP) {\n        dispatch(\n          setGroupMessage({\n            target,\n            message: attackPower,\n          })\n        );\n      }\n      dispatch(\n        setEntityAnimation(target, {\n          type: HURT,\n          left:\n            target.group === PLAYER_GROUP && targetIndex !== undefined\n              ? actorEntity.leftPosition\n              : undefined,\n        })\n      );\n      await timeout(ANIMATION_DURATION_MAP[HURT]);\n      if (actorGroup === PLAYER_GROUP) {\n        dispatch(\n          setGroupMessage({\n            target,\n            message: '',\n          })\n        );\n      }\n      dispatch(updateEntityHP(target, crit ? -attackPower * 2 : -attackPower));\n      if (crit) {\n        dispatch(\n          setGroupMessage({\n            target: { group: PLAYER_GROUP },\n            message: '',\n          })\n        );\n      }\n      dispatch(setEntityAnimation(target, { type: IDLE, left: -1 }));\n    } else {\n      if (actorGroup === PLAYER_GROUP) {\n        dispatch(\n          setGroupMessage({\n            target,\n            message: 'miss',\n          })\n        );\n      }\n      await timeout(1000);\n      if (actorGroup === PLAYER_GROUP) {\n        dispatch(\n          setGroupMessage({\n            target,\n            message: '',\n          })\n        );\n      }\n      dispatch(setEntityAnimation(target, IDLE));\n    }\n\n    // need to dispatch this at the end of any queue action to progress the queue\n    dispatch(setGameState(POST_EXECUTION));\n  };\n\nexport const techThunk =\n  (actor: ActorType, initialTarget: TargetType, techIndex: number) =>\n  async (dispatch: Dispatch<ActionType>, getState: any) => {\n    const { groups } = getState();\n\n    const { group: actorGroup, index: actorIndex } = actor;\n    const actorEntity = groups[actorGroup].entities[actorIndex];\n    const { techniques } = actorEntity;\n\n    const techData = techniques[techIndex];\n    const { name, effect, power, tp } = techData || {};\n\n    let { group: initialTargetGroup, index: initialTargetIndex } =\n      initialTarget;\n    const target =\n      effect === DAMAGE\n        ? retarget(groups, actorGroup, initialTargetGroup, initialTargetIndex)\n        : initialTarget;\n    const { group: targetGroup, index: targetIndex } = target;\n\n    const targetLeftPosition = getTargetLeftPosition(\n      groups,\n      targetGroup,\n      targetIndex\n    );\n\n    const selfTargeting =\n      actorGroup === targetGroup && actorIndex === targetIndex;\n\n    dispatch(\n      setEntityAnimation(actor, {\n        type: USE,\n        left:\n          actorGroup === PLAYER_GROUP && targetGroup !== PLAYER_GROUP\n            ? targetLeftPosition\n            : undefined,\n      })\n    );\n\n    if (!selfTargeting) {\n      dispatch(\n        setEntityAnimation(target, {\n          type: TARGETED,\n          left:\n            actorGroup !== PLAYER_GROUP && targetIndex !== undefined\n              ? actorEntity.leftPosition\n              : undefined,\n        })\n      );\n    }\n\n    await timeout(ANIMATION_DURATION_MAP[USE]);\n\n    if (tp > actorEntity.tp) {\n      dispatch(setEntityAnimation(actor, IDLE));\n      dispatch(setEntityAnimation(target, IDLE));\n      dispatch(setGameState(POST_EXECUTION));\n      return;\n    }\n    dispatch(updateEntityTP(actor, -tp));\n\n    if (selfTargeting) {\n      dispatch(setEntityAnimation(actor, { type: TARGETED, left: -1 }));\n    } else {\n      dispatch(setEntityAnimation(actor, { type: IDLE, left: -1 }));\n    }\n\n    dispatch(\n      setGroupMessage({\n        target: { group: PLAYER_GROUP },\n        message: name,\n      })\n    );\n\n    // TODO: FX animation, probably move animation and timeouts into switch below\n    await timeout(500);\n\n    switch (effect) {\n      case DAMAGE: {\n        if (targetGroup !== PLAYER_GROUP) {\n          dispatch(\n            setGroupMessage({\n              target,\n              message: power,\n            })\n          );\n        }\n        dispatch(\n          setEntityAnimation(target, {\n            type: HURT,\n            left: -1,\n          })\n        );\n        await timeout(ANIMATION_DURATION_MAP[HURT]);\n        dispatch(updateEntityHP(target, -power));\n        break;\n      }\n      case HEAL: {\n        if (targetGroup !== PLAYER_GROUP) {\n          dispatch(\n            setGroupMessage({\n              target,\n              message: power,\n            })\n          );\n        }\n        await timeout(1000);\n        dispatch(updateEntityHP(target, power));\n        break;\n      }\n      case POISON: {\n        break;\n      }\n      case PARALYZE: {\n        break;\n      }\n      case SLEEP: {\n        break;\n      }\n    }\n\n    dispatch(\n      setGroupMessage({\n        target: { group: PLAYER_GROUP },\n        message: '',\n      })\n    );\n    if (targetGroup !== PLAYER_GROUP) {\n      dispatch(\n        setGroupMessage({\n          target,\n          message: '',\n        })\n      );\n    }\n    dispatch(setEntityAnimation(target, { type: IDLE, left: -1 }));\n\n    // need to dispatch this at the end of any queue action to progress the queue\n    dispatch(setGameState(POST_EXECUTION));\n  };\n\nexport const itemThunk =\n  (actor: ActorType, target: TargetType, itemIndex: number) =>\n  async (dispatch: Dispatch<ActionType>, getState: any) => {\n    const { groups } = getState();\n\n    const { group: actorGroup, index: actorIndex } = actor;\n    const actorEntity = groups[actorGroup].entities[actorIndex];\n    const { inventory } = actorEntity;\n\n    // TODO: retargeting logic needed?\n    const { group: targetGroup, index: targetIndex } = target;\n\n    const targetLeftPosition = getTargetLeftPosition(\n      groups,\n      targetGroup,\n      targetIndex\n    );\n\n    const selfTargeting =\n      actorGroup === targetGroup && actorIndex === targetIndex;\n\n    const itemData = inventory[itemIndex];\n    const { name, itemEffect, itemPower, consumable } = itemData || {};\n\n    dispatch(\n      setEntityAnimation(actor, {\n        type: USE,\n        left:\n          actorGroup === PLAYER_GROUP && targetGroup !== PLAYER_GROUP\n            ? targetLeftPosition\n            : undefined,\n      })\n    );\n\n    if (!selfTargeting) {\n      dispatch(\n        setEntityAnimation(target, {\n          type: TARGETED,\n          left:\n            actorGroup !== PLAYER_GROUP && targetIndex !== undefined\n              ? actorEntity.leftPosition\n              : undefined,\n        })\n      );\n    }\n\n    await timeout(ANIMATION_DURATION_MAP[USE]);\n\n    if (consumable) {\n      dispatch(removeEntityItem(actor, itemIndex));\n    }\n\n    if (selfTargeting) {\n      dispatch(setEntityAnimation(actor, { type: TARGETED, left: -1 }));\n    } else {\n      dispatch(setEntityAnimation(actor, { type: IDLE, left: -1 }));\n    }\n\n    dispatch(\n      setGroupMessage({\n        target: { group: PLAYER_GROUP },\n        message: name,\n      })\n    );\n\n    // TODO: FX animation, probably move animation and timeouts into switch below\n    await timeout(500);\n\n    switch (itemEffect) {\n      case DAMAGE: {\n        if (targetGroup !== PLAYER_GROUP) {\n          dispatch(\n            setGroupMessage({\n              target,\n              message: itemPower,\n            })\n          );\n        }\n        dispatch(\n          setEntityAnimation(target, {\n            type: HURT,\n            left: -1,\n          })\n        );\n        await timeout(ANIMATION_DURATION_MAP[HURT]);\n        dispatch(updateEntityHP(target, -itemPower));\n        break;\n      }\n      case HEAL: {\n        if (targetGroup !== PLAYER_GROUP) {\n          dispatch(\n            setGroupMessage({\n              target,\n              message: itemPower,\n            })\n          );\n        }\n        await timeout(1000);\n        dispatch(updateEntityHP(target, itemPower));\n        break;\n      }\n      case POISON: {\n        break;\n      }\n      case PARALYZE: {\n        break;\n      }\n      case SLEEP: {\n        break;\n      }\n    }\n\n    dispatch(\n      setGroupMessage({\n        target: { group: PLAYER_GROUP },\n        message: '',\n      })\n    );\n    if (targetGroup !== PLAYER_GROUP) {\n      dispatch(\n        setGroupMessage({\n          target,\n          message: '',\n        })\n      );\n    }\n    dispatch(setEntityAnimation(target, { type: IDLE, left: -1 }));\n\n    // need to dispatch this at the end of any queue action to progress the queue\n    dispatch(setGameState(POST_EXECUTION));\n  };\n\nexport const postExecutionThunk =\n  () => async (dispatch: Dispatch<ActionType>, getState: any) => {\n    const {\n      groups: {\n        [PLAYER_GROUP]: playerGroup,\n        [LEFT_ENEMY_GROUP]: leftEnemyGroup,\n        [RIGHT_ENEMY_GROUP]: rightEnemyGroup,\n      },\n    } = getState();\n\n    let livingHeroes = 0;\n    let livingLeft = 0;\n    let livingRight = 0;\n\n    for (const [index, hero] of playerGroup.entities.entries()) {\n      const { status, currentAnimation, hp } = hero;\n\n      // TODO: account for revival?\n      // TODO: will need to account for paralyzed as well\n      if (hp > 0 && status === OK) {\n        dispatch(\n          setEntityAnimation({ group: PLAYER_GROUP, index }, { type: IDLE })\n        );\n        livingHeroes++;\n      } else if (currentAnimation.type !== DYING && status !== DEAD) {\n        dispatch(\n          setEntityAnimation(\n            { group: PLAYER_GROUP, index },\n            { type: DYING, left: -1 } // TODO: -1 thing is kind of hacky, maybe formalize into a preservePosition flag\n          )\n        );\n        await timeout(ANIMATION_DURATION_MAP[DYING]);\n        dispatch(setEntityStatus({ group: PLAYER_GROUP, index }, DEAD));\n        dispatch(setEntityAnimation({ group: PLAYER_GROUP, index }, IDLE));\n      }\n    }\n    for (const [index, enemy] of leftEnemyGroup.entities.entries()) {\n      const { status, currentAnimation, hp } = enemy;\n\n      if (hp > 0 && status === OK) {\n        livingLeft++;\n      } else if (currentAnimation.type !== DYING && status !== DEAD) {\n        dispatch(setEntityAnimation({ group: LEFT_ENEMY_GROUP, index }, DYING));\n        await timeout(ANIMATION_DURATION_MAP[DYING]);\n        dispatch(setEntityStatus({ group: LEFT_ENEMY_GROUP, index }, DEAD));\n        dispatch(setEntityAnimation({ group: LEFT_ENEMY_GROUP, index }, IDLE));\n      }\n    }\n    for (const [index, enemy] of rightEnemyGroup.entities.entries()) {\n      const { status, currentAnimation, hp } = enemy;\n\n      if (hp > 0 && status === OK) {\n        livingRight++;\n      } else if (currentAnimation.type !== DYING && status !== DEAD) {\n        dispatch(\n          setEntityAnimation({ group: RIGHT_ENEMY_GROUP, index }, DYING)\n        );\n        await timeout(ANIMATION_DURATION_MAP[DYING]);\n        dispatch(setEntityStatus({ group: RIGHT_ENEMY_GROUP, index }, DEAD));\n        dispatch(setEntityAnimation({ group: RIGHT_ENEMY_GROUP, index }, IDLE));\n      }\n    }\n\n    await timeout(500);\n\n    if (!livingHeroes) {\n      dispatch(loseGame());\n    } else if (!livingLeft && !livingRight) {\n      dispatch(winGame());\n    } else {\n      dispatch(incrementQueueIndex());\n      dispatch(setGameState(EXECUTING));\n    }\n  };\n","import { AppStateType, ActionType, TargetType } from '../types';\nimport { actionTypes } from '../actions';\nimport {\n  AnimationTypesEnum,\n  EntityStatusesEnum,\n  EXECUTING,\n  GAME_LOST,\n  GAME_WON,\n  PLAYER_GROUP,\n} from '../constants';\nconst {\n  SET_PIXEL_MULTIPLIER,\n  START_NEW_GAME,\n  START_NEW_ROUND,\n  WIN_GAME,\n  LOSE_GAME,\n  SET_QUEUE_INDEX,\n  INCREMENT_QUEUE_INDEX,\n  SET_GAME_STATE,\n  SET_PLAYER_INTERRUPT,\n  QUEUE_ACTION,\n  SET_GROUP_MESSAGE,\n  SET_ENTITY_STATUS,\n  SET_ENTITY_ANIMATION,\n  UPDATE_ENTITY_HP,\n  UPDATE_ENTITY_TP,\n  REMOVE_ENTITY_ITEM,\n} = actionTypes;\n\nconst reducer = (state: AppStateType, action: ActionType) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case SET_PIXEL_MULTIPLIER: {\n      return {\n        ...state,\n        pixelMultiplier: payload,\n      };\n    }\n    case START_NEW_GAME: {\n      return {\n        ...state,\n        ...payload,\n      };\n    }\n    case START_NEW_ROUND: {\n      return {\n        ...state,\n        gameState: EXECUTING,\n        queueIndex: 0,\n        queue: payload,\n      };\n    }\n    case WIN_GAME: {\n      return {\n        ...state,\n        gameState: GAME_WON,\n        queueIndex: null,\n      };\n    }\n    case LOSE_GAME: {\n      return {\n        ...state,\n        gameState: GAME_LOST,\n        queueIndex: null,\n      };\n    }\n    case SET_QUEUE_INDEX: {\n      return {\n        ...state,\n        queueIndex: payload,\n      };\n    }\n    case INCREMENT_QUEUE_INDEX: {\n      return {\n        ...state,\n        queueIndex: state.queueIndex === null ? 0 : state.queueIndex + 1,\n      };\n    }\n    case SET_GAME_STATE: {\n      return {\n        ...state,\n        gameState: payload,\n      };\n    }\n    case SET_PLAYER_INTERRUPT: {\n      return {\n        ...state,\n        playerInterrupt: payload,\n      };\n    }\n    case SET_GROUP_MESSAGE: {\n      const {\n        target: { group: targetGroup },\n        message,\n      }: { target: TargetType; message: string | number } = payload;\n\n      let newGroups = { ...state.groups };\n\n      if (Array.isArray(targetGroup)) {\n        targetGroup.forEach((group) => {\n          newGroups = {\n            ...newGroups,\n            [group]: {\n              ...newGroups[group],\n              message,\n            },\n          };\n        });\n      } else {\n        newGroups = {\n          ...newGroups,\n          [targetGroup]: { ...newGroups[targetGroup], message },\n        };\n      }\n\n      return {\n        ...state,\n        groups: newGroups,\n      };\n    }\n    case SET_ENTITY_STATUS: {\n      const {\n        target: { group: targetGroup, index: targetIndex },\n        status,\n      }: {\n        target: TargetType;\n        status: EntityStatusesEnum;\n      } = payload;\n\n      let newGroups = { ...state.groups };\n\n      if (Array.isArray(targetGroup)) {\n        targetGroup.forEach((groupName) => {\n          newGroups[groupName] = {\n            ...newGroups[groupName],\n            entities: newGroups[groupName].entities.map((entity) => ({\n              ...entity,\n              status,\n            })),\n          };\n        });\n      } else if (targetIndex === undefined) {\n        const newGroupEntities = newGroups[targetGroup].entities.map(\n          (entity) => ({ ...entity, status })\n        );\n        newGroups = {\n          ...newGroups,\n          [targetGroup]: {\n            ...newGroups[targetGroup],\n            entities: newGroupEntities,\n          },\n        };\n      } else {\n        const newEntity = {\n          ...newGroups[targetGroup].entities[targetIndex],\n          status,\n        };\n        const newGroupEntities = [\n          ...newGroups[targetGroup].entities.slice(0, targetIndex),\n          newEntity,\n          ...newGroups[targetGroup].entities.slice(targetIndex + 1),\n        ];\n        newGroups = {\n          ...newGroups,\n          [targetGroup]: {\n            ...newGroups[targetGroup],\n            entities: newGroupEntities,\n          },\n        };\n      }\n\n      return {\n        ...state,\n        groups: newGroups,\n      };\n    }\n    case SET_ENTITY_ANIMATION: {\n      // TODO: lot of code duplication in these reducers with the addition of group support\n      // could have more generic actions like SET_ENTITY_ATTRIBUTE, SET_ENTITY_GROUP_ATTRIBUTE, SET_ENTITY_GROUPS_ATTRIBUTE\n      const {\n        target: { group: targetGroup, index: targetIndex },\n        animation,\n      }: {\n        target: TargetType;\n        animation:\n          | AnimationTypesEnum\n          | {\n              type: AnimationTypesEnum;\n              left?: number | string;\n            };\n      } = payload;\n\n      let newGroups = { ...state.groups };\n\n      let newAnimation =\n        typeof animation === 'string' ? { type: animation } : animation;\n\n      // TODO: this -1 hack to preserve currentAnimation left position works but it needs to go\n      if (Array.isArray(targetGroup)) {\n        targetGroup.forEach((groupName) => {\n          newGroups[groupName] = {\n            ...newGroups[groupName],\n            entities: newGroups[groupName].entities.map((entity) => ({\n              ...entity,\n              currentAnimation:\n                newAnimation.left === -1\n                  ? { ...entity.currentAnimation, type: newAnimation.type }\n                  : newAnimation,\n            })),\n          };\n        });\n      } else if (targetIndex === undefined) {\n        const newGroupEntities = newGroups[targetGroup].entities.map(\n          (entity) => ({\n            ...entity,\n            currentAnimation:\n              newAnimation.left === -1\n                ? { ...entity.currentAnimation, type: newAnimation.type }\n                : newAnimation,\n          })\n        );\n        newGroups = {\n          ...newGroups,\n          [targetGroup]: {\n            ...newGroups[targetGroup],\n            entities: newGroupEntities,\n          },\n        };\n      } else {\n        const newEntity = {\n          ...newGroups[targetGroup].entities[targetIndex],\n          currentAnimation:\n            newAnimation.left === -1\n              ? {\n                  ...newGroups[targetGroup].entities[targetIndex]\n                    .currentAnimation,\n                  type: newAnimation.type,\n                }\n              : newAnimation,\n        };\n        const newGroupEntities = [\n          ...newGroups[targetGroup].entities.slice(0, targetIndex),\n          newEntity,\n          ...newGroups[targetGroup].entities.slice(targetIndex + 1),\n        ];\n        newGroups = {\n          ...newGroups,\n          [targetGroup]: {\n            ...newGroups[targetGroup],\n            entities: newGroupEntities,\n          },\n        };\n      }\n\n      return {\n        ...state,\n        groups: newGroups,\n      };\n    }\n    case UPDATE_ENTITY_HP: {\n      const {\n        target: { group: targetGroup, index: targetIndex },\n        offset,\n      }: { target: TargetType; offset: number } = payload;\n\n      let newGroups = { ...state.groups };\n\n      if (Array.isArray(targetGroup)) {\n        targetGroup.forEach((groupName) => {\n          newGroups[groupName] = {\n            ...newGroups[groupName],\n            entities: newGroups[groupName].entities.map((entity) => ({\n              ...entity,\n              hp: Math.min(entity.maxHp, entity.hp + offset),\n            })),\n          };\n        });\n      } else if (targetIndex === undefined) {\n        const newGroupEntities = newGroups[targetGroup].entities.map(\n          (entity) => ({\n            ...entity,\n            hp: Math.min(entity.maxHp, entity.hp + offset),\n          })\n        );\n        newGroups = {\n          ...newGroups,\n          [targetGroup]: {\n            ...newGroups[targetGroup],\n            entities: newGroupEntities,\n          },\n        };\n      } else {\n        const newEntity = {\n          ...newGroups[targetGroup].entities[targetIndex],\n          hp: Math.min(\n            newGroups[targetGroup].entities[targetIndex].maxHp,\n            newGroups[targetGroup].entities[targetIndex].hp + offset\n          ),\n        };\n        const newGroupEntities = [\n          ...newGroups[targetGroup].entities.slice(0, targetIndex),\n          newEntity,\n          ...newGroups[targetGroup].entities.slice(targetIndex + 1),\n        ];\n        newGroups = {\n          ...newGroups,\n          [targetGroup]: {\n            ...newGroups[targetGroup],\n            entities: newGroupEntities,\n          },\n        };\n      }\n\n      return {\n        ...state,\n        groups: newGroups,\n      };\n    }\n    case UPDATE_ENTITY_TP: {\n      const {\n        target: { group: targetGroup, index: targetIndex },\n        offset,\n      }: { target: TargetType; offset: number } = payload;\n\n      let newGroups = { ...state.groups };\n\n      if (Array.isArray(targetGroup)) {\n        targetGroup.forEach((groupName) => {\n          newGroups[groupName] = {\n            ...newGroups[groupName],\n            entities: newGroups[groupName].entities.map((entity) => ({\n              ...entity,\n              tp: entity.tp + offset,\n            })),\n          };\n        });\n      } else if (targetIndex === undefined) {\n        const newGroupEntities = newGroups[targetGroup].entities.map(\n          (entity) => ({ ...entity, tp: entity.tp + offset })\n        );\n        newGroups = {\n          ...newGroups,\n          [targetGroup]: {\n            ...newGroups[targetGroup],\n            entities: newGroupEntities,\n          },\n        };\n      } else {\n        const newEntity = {\n          ...newGroups[targetGroup].entities[targetIndex],\n          tp: newGroups[targetGroup].entities[targetIndex].tp + offset,\n        };\n        const newGroupEntities = [\n          ...newGroups[targetGroup].entities.slice(0, targetIndex),\n          newEntity,\n          ...newGroups[targetGroup].entities.slice(targetIndex + 1),\n        ];\n        newGroups = {\n          ...newGroups,\n          [targetGroup]: {\n            ...newGroups[targetGroup],\n            entities: newGroupEntities,\n          },\n        };\n      }\n\n      return {\n        ...state,\n        groups: newGroups,\n      };\n    }\n    case QUEUE_ACTION: {\n      const { heroIndex: index, target, type, techIndex, itemIndex } = payload;\n\n      const newEntity = {\n        ...state.groups[PLAYER_GROUP].entities[index],\n        queuedAction: {\n          type,\n          target,\n          techIndex,\n          itemIndex,\n        },\n      };\n      const newGroupEntities = [\n        ...state.groups[PLAYER_GROUP].entities.slice(0, index),\n        newEntity,\n        ...state.groups[PLAYER_GROUP].entities.slice(index + 1),\n      ];\n\n      return {\n        ...state,\n        groups: {\n          ...state.groups,\n          [PLAYER_GROUP]: {\n            ...state.groups[PLAYER_GROUP],\n            entities: newGroupEntities,\n          },\n        },\n      };\n    }\n    case REMOVE_ENTITY_ITEM: {\n      const { target, itemIndex }: { target: TargetType; itemIndex: number } =\n        payload;\n      const { group, index } = target;\n\n      if (!group || Array.isArray(group) || index === undefined) {\n        return state;\n      }\n\n      const newInventory = [...state.groups[group].entities[index].inventory];\n      newInventory.splice(itemIndex, 1);\n      const newEntity = {\n        ...state.groups[group].entities[index],\n        inventory: newInventory,\n      };\n      const newGroupEntities = [\n        ...state.groups[PLAYER_GROUP].entities.slice(0, index),\n        newEntity,\n        ...state.groups[PLAYER_GROUP].entities.slice(index + 1),\n      ];\n\n      return {\n        ...state,\n        groups: {\n          ...state.groups,\n          [PLAYER_GROUP]: {\n            ...state.groups[PLAYER_GROUP],\n            entities: newGroupEntities,\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import {\n  createContext,\n  Dispatch,\n  useReducer,\n  useRef,\n  useCallback,\n} from 'react';\n\nimport { AppStateType, ActionType } from '../types';\nimport {\n  INIT,\n  LEFT_ENEMY_GROUP,\n  PLAYER_GROUP,\n  RIGHT_ENEMY_GROUP,\n} from '../constants';\nimport reducer from './reducer';\n\nexport const initialState = {\n  pixelMultiplier: 1,\n  gameState: INIT,\n  queue: [],\n  queueIndex: null,\n  playerInterrupt: false,\n  groups: {\n    [PLAYER_GROUP]: {\n      entities: [],\n      message: '',\n    },\n    [LEFT_ENEMY_GROUP]: {\n      entities: [],\n      message: '',\n    },\n    [RIGHT_ENEMY_GROUP]: {\n      entities: [],\n      message: '',\n    },\n  },\n};\n\nexport const AppStateContext = createContext<[AppStateType, Dispatch<any>]>([\n  initialState,\n  () => null,\n]);\n\n// TODO: ts\nexport const AppStateProvider = ({ children }: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const prevState = useRef();\n\n  let customDispatch = useCallback((action: ActionType | void) => {\n    if (typeof action === 'function') {\n      // @ts-ignore\n      action(customDispatch, () => prevState.current);\n    } else {\n      // @ts-ignore\n      dispatch(action);\n    }\n  }, []);\n\n  prevState.current = state;\n\n  return (\n    <AppStateContext.Provider value={[state, customDispatch]}>\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst TitleContainer = styled.div`\n  margin: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  background: url('./assets/title.png');\n  background-position: center;\n  background-size: contain;\n  background-repeat: no-repeat;\n`;\n\nconst TitleMenu = styled((props: any) => <div {...props} />)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-end;\n  aspect-ratio: 4 / 3;\n  width: 133.33vmin;\n  overflow: hidden;\n  padding: 0.75em;\n`;\n\nconst Title = () => (\n  <TitleContainer>\n    <TitleMenu>\n      <Link to=\"/new-game\">Start</Link>\n      <Link to=\"/about\">About</Link>\n    </TitleMenu>\n  </TitleContainer>\n);\n\nexport default Title;\n","import { ENTITY, ROLF, RUDO, NEI, AMY, GROUP } from '../constants';\n\nconst WEAPONS = {\n  KNIFE: {\n    name: 'KNIFE',\n    attackPower: 5,\n    targetType: ENTITY,\n    attackType: 'SLASH',\n    equippableBy: [ROLF, RUDO, AMY],\n  },\n  STEEL_BAR: {\n    name: 'STEEL_BAR',\n    attackPower: 7,\n    defensePower: 2,\n    targetType: ENTITY,\n    attackType: 'SLASH',\n    equippableBy: [NEI],\n  },\n  SHOTGUN: {\n    name: 'SHOTGUN',\n    attackPower: 20,\n    targetType: GROUP,\n    attackType: 'SHOOT',\n    equippableBy: [RUDO],\n    twoHanded: true,\n  },\n};\n\nexport default WEAPONS;\n","import { ROLF, RUDO, AMY } from '../constants';\n\nconst SHIELDS = {\n  CARBON_EMEL: {\n    name: 'CARBON_EMEL',\n    defensePower: 7,\n    equippableBy: [AMY],\n  },\n  CARBON_SHIELD: {\n    name: 'CARBON_SHIELD',\n    defensePower: 8,\n    equippableBy: [ROLF, RUDO],\n  },\n};\n\nexport default SHIELDS;\n","import { HEAD, ROLF, RUDO, NEI, AMY } from '../constants';\n\nconst ARMOR = {\n  HEADGEAR: {\n    name: 'HEADGEAR',\n    defensePower: 3,\n    type: HEAD,\n    equippableBy: [ROLF, RUDO, AMY],\n  },\n  RIBBON: {\n    name: 'RIBBON',\n    defensePower: 3,\n    type: HEAD,\n    equippableBy: [NEI],\n  },\n};\n\nexport default ARMOR;\n","import { ALL, DAMAGE, ENTITY, GROUP, HEAL } from '../constants';\n\nconst ITEMS = {\n  RES: {\n    name: 'RES',\n    targetType: ENTITY,\n    targetAllies: true,\n    effect: HEAL,\n    power: 20,\n    tp: 3,\n  },\n  FOI: {\n    name: 'FOI',\n    targetType: ENTITY,\n    effect: DAMAGE,\n    power: 14, // TODO: add support for value ranges\n    tp: 2,\n  },\n  GIFOI: {\n    name: 'GIFOI',\n    targetType: GROUP,\n    effect: DAMAGE,\n    power: 20,\n    tp: 5,\n  },\n  LIGHTNING: {\n    name: 'LIGHTNING',\n    targetType: ALL,\n    effect: DAMAGE,\n    power: 100,\n    tp: 5,\n  },\n};\n\nexport default ITEMS;\n","import {\n  ROLF,\n  RUDO,\n  NEI,\n  AMY,\n  HUMAN,\n  NUMAN,\n  ATTACK,\n  LEFT_ENEMY_GROUP,\n} from '../constants';\nimport { generateEntityAnimations } from '../utils';\nimport ITEMS from './items';\nimport WEAPONS from './weapons';\nimport SHIELDS from './shields';\nimport ARMOR from './armor';\nimport TECHNIQUES from './techniques';\n\nconst { MONOMATE } = ITEMS;\nconst { KNIFE, STEEL_BAR, SHOTGUN } = WEAPONS;\nconst { CARBON_EMEL, CARBON_SHIELD } = SHIELDS;\nconst { HEADGEAR, RIBBON } = ARMOR;\nconst { RES, FOI, GIFOI } = TECHNIQUES;\n\nconst HERO_DATA = {\n  [ROLF]: {\n    type: HUMAN,\n    name: ROLF,\n    maxHp: 15,\n    hp: 15,\n    maxTp: 5,\n    tp: 5,\n    attack: 1,\n    defense: 3,\n    speed: 2,\n    inventory: [MONOMATE, MONOMATE],\n    equipment: {\n      leftHand: CARBON_SHIELD,\n      rightHand: KNIFE,\n      head: HEADGEAR,\n    },\n    techniques: [RES, FOI, GIFOI],\n    animations: generateEntityAnimations(false),\n    queuedAction: {\n      type: ATTACK,\n      target: {\n        group: LEFT_ENEMY_GROUP,\n        index: 0,\n      },\n    },\n  },\n  [RUDO]: {\n    type: HUMAN,\n    name: RUDO,\n    maxHp: 20,\n    hp: 20,\n    maxTp: 0,\n    tp: 0,\n    attack: 1,\n    defense: 3,\n    speed: 2,\n    inventory: [],\n    equipment: {\n      leftHand: SHOTGUN,\n      rightHand: SHOTGUN,\n    },\n    techniques: [],\n    animations: generateEntityAnimations(false),\n    queuedAction: {\n      type: ATTACK,\n      target: {\n        group: LEFT_ENEMY_GROUP,\n        // index: 0,\n      },\n    },\n  },\n  [NEI]: {\n    type: NUMAN,\n    name: NEI,\n    maxHp: 15,\n    hp: 15,\n    maxTp: 15,\n    tp: 15,\n    attack: 1,\n    defense: 3,\n    speed: 3,\n    inventory: [MONOMATE, MONOMATE, MONOMATE],\n    equipment: {\n      leftHand: STEEL_BAR,\n      rightHand: STEEL_BAR,\n      head: RIBBON,\n    },\n    techniques: [RES],\n    animations: generateEntityAnimations(false),\n    queuedAction: {\n      type: ATTACK,\n      target: {\n        group: LEFT_ENEMY_GROUP,\n        index: 0,\n      },\n    },\n  },\n  [AMY]: {\n    type: HUMAN,\n    name: AMY,\n    maxHp: 10,\n    hp: 10,\n    maxTp: 15,\n    tp: 15,\n    attack: 1,\n    defense: 3,\n    speed: 2,\n    inventory: [MONOMATE, MONOMATE],\n    equipment: {\n      leftHand: CARBON_EMEL,\n      rightHand: KNIFE,\n      head: HEADGEAR,\n    },\n    techniques: [RES],\n    animations: generateEntityAnimations(false),\n    queuedAction: {\n      type: ATTACK,\n      target: {\n        group: LEFT_ENEMY_GROUP,\n        index: 0,\n      },\n    },\n  },\n};\n\nexport default HERO_DATA;\n","import { ENTITY, HEAL } from '../constants';\n\nconst ITEMS = {\n  MONOMATE: {\n    name: 'MONOMATE',\n    consumable: true,\n    itemTargetType: ENTITY,\n    itemTargetAllies: true,\n    itemEffect: HEAL,\n    itemPower: 10,\n  },\n};\n\nexport default ITEMS;\n","import {\n  FROGGY,\n  WRESTLER,\n  DARKFORCE,\n  MONSTER,\n  ATTACK,\n  PLAYER_GROUP,\n  TECH,\n} from '../constants';\nimport { generateEntityAnimations } from '../utils';\nimport TECHNIQUES from './techniques';\n\nconst { RES, FOI, LIGHTNING } = TECHNIQUES;\n\nconst ENEMY_DATA = {\n  [FROGGY]: {\n    type: MONSTER,\n    name: FROGGY,\n    maxHp: 10,\n    hp: 10,\n    maxTp: 5,\n    tp: 5,\n    attack: 1,\n    defense: 3,\n    speed: 1,\n    inventory: [],\n    equipment: {},\n    techniques: [],\n    animations: generateEntityAnimations(true),\n    size: 1,\n    queuedAction: {\n      type: ATTACK,\n      target: {\n        group: PLAYER_GROUP,\n        index: 0,\n      },\n    },\n  },\n  [WRESTLER]: {\n    type: MONSTER,\n    name: WRESTLER,\n    maxHp: 20,\n    hp: 20,\n    maxTp: 0,\n    tp: 0,\n    attack: 1,\n    defense: 3,\n    speed: 3,\n    inventory: [],\n    equipment: [],\n    techniques: [],\n    animations: generateEntityAnimations(true),\n    size: 1,\n    queuedAction: {\n      type: ATTACK,\n      target: {\n        group: PLAYER_GROUP,\n        index: 0,\n      },\n    },\n  },\n  [DARKFORCE]: {\n    type: MONSTER,\n    name: DARKFORCE,\n    maxHp: 2560,\n    hp: 2560,\n    maxTp: 20,\n    tp: 20,\n    attack: 10,\n    defense: 10,\n    speed: 3,\n    inventory: [],\n    equipment: [],\n    techniques: [RES, FOI, LIGHTNING],\n    animations: generateEntityAnimations(true),\n    size: 4,\n    height: 120,\n    width: 320,\n    queuedAction: {\n      type: TECH,\n      target: {\n        group: PLAYER_GROUP,\n        // index: 0, // TODO: this ultimately controls what gets executed, need to always determine target by weapon/tech/item\n      },\n      techIndex: 2,\n    },\n  },\n};\n\nexport default ENEMY_DATA;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\n\nimport { AppStateContext } from '../state';\n\nconst Container = styled((props) => <div {...props} />)`\n  background: #000080;\n  color: white;\n  position: relative;\n  padding: ${({ pixelMultiplier }) => 5 * pixelMultiplier}px\n    ${({ pixelMultiplier }) => 8 * pixelMultiplier}px\n    ${({ pixelMultiplier }) => 5 * pixelMultiplier}px\n    ${({ pixelMultiplier }) => 8 * pixelMultiplier}px;\n`;\n\nconst Corner = styled.div`\n  position: absolute;\n  background-size: cover;\n  background-repeat: none;\n`;\n\nconst Side = styled.div`\n  position: absolute;\n  height: 100%;\n  background-size: 100%;\n  background-repeat: repeat-y;\n`;\n\nconst TopBottom = styled((props) => <div {...props} />)`\n  position: absolute;\n  height: ${({ pixelMultiplier }) => 3 * pixelMultiplier}px;\n  width: 100%;\n  background-size: ${({ pixelMultiplier }) => 5 * pixelMultiplier}px 100%;\n  background-repeat: repeat-x;\n`;\n\ninterface WindowProps {\n  style?: object;\n}\n\nconst Window: React.FunctionComponent<WindowProps> = (props) => {\n  const { children } = props;\n  const [state] = useContext(AppStateContext);\n  const { pixelMultiplier } = state;\n\n  return (\n    <Container {...props} pixelMultiplier={pixelMultiplier}>\n      {children}\n\n      <Side\n        style={{\n          top: 0,\n          left: 0,\n          width: 5 * pixelMultiplier,\n          backgroundImage: 'url(./assets/left.png)',\n        }}\n      />\n      <Side\n        style={{\n          top: 0,\n          right: 0,\n          width: 5 * pixelMultiplier,\n          backgroundImage: 'url(./assets/right.png)',\n        }}\n      />\n      <TopBottom\n        style={{ top: 0, left: 0, backgroundImage: 'url(./assets/top.png)' }}\n        pixelMultiplier={pixelMultiplier}\n      />\n      <TopBottom\n        style={{\n          bottom: 0,\n          left: 0,\n          backgroundImage: 'url(./assets/bottom.png)',\n        }}\n        pixelMultiplier={pixelMultiplier}\n      />\n      <Corner\n        style={{\n          top: 0,\n          left: 0,\n          width: 5 * pixelMultiplier,\n          height: 3 * pixelMultiplier,\n          backgroundImage: 'url(./assets/top-left-corner.png)',\n        }}\n      />\n      <Corner\n        style={{\n          top: 0,\n          right: 0,\n          width: 5 * pixelMultiplier,\n          height: 3 * pixelMultiplier,\n          backgroundImage: 'url(./assets/top-right-corner.png)',\n        }}\n      />\n      <Corner\n        style={{\n          bottom: 0,\n          left: 0,\n          width: 5 * pixelMultiplier,\n          height: 3 * pixelMultiplier,\n          backgroundImage: 'url(./assets/bottom-left-corner.png)',\n        }}\n      />\n      <Corner\n        style={{\n          bottom: 0,\n          right: 0,\n          width: 5 * pixelMultiplier,\n          height: 3 * pixelMultiplier,\n          backgroundImage: 'url(./assets/bottom-right-corner.png)',\n        }}\n      />\n    </Container>\n  );\n};\n\nexport default Window;\n","import { ChangeEvent, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport { AppStateContext } from '../state';\nimport { actionCreators } from '../actions';\nimport {\n  NEW_GAME,\n  PLAYER_GROUP,\n  LEFT_ENEMY_GROUP,\n  RIGHT_ENEMY_GROUP,\n  HeroesEnum,\n  EnemyTypesEnum,\n  OK,\n  IDLE,\n  ROLF,\n  FROGGY,\n  WRESTLER,\n  NEI,\n  RUDO,\n  AMY,\n} from '../constants';\nimport HEROES from '../data/heroes';\nimport ENEMIES from '../data/enemies';\nimport Window from '../components/Window';\n\nconst { startNewGame: startNewGameAction } = actionCreators;\n\nconst Button = styled((props) => <button {...props} />)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: ${({ pixelMultiplier }) => 8 * pixelMultiplier}px;\n  border: 1px solid;\n  border-radius: 8px;\n  margin: 1rem auto;\n  cursor: pointer;\n`;\n\nconst NewGameMenu = () => {\n  const [state] = useContext(AppStateContext);\n  const { pixelMultiplier } = state;\n  const history = useHistory();\n  const [, dispatch] = useContext(AppStateContext);\n\n  const [heroes, setHeroes] = useState<HeroesEnum[]>([ROLF, RUDO, NEI, AMY]);\n  const [leftEnemyType, setLeftEnemyType] = useState<\n    EnemyTypesEnum | undefined\n  >(FROGGY);\n  const [leftEnemyCount, setLeftEnemyCount] = useState<number>(3);\n  const [rightEnemyType, setRightEnemyType] = useState<\n    EnemyTypesEnum | undefined\n  >(WRESTLER);\n  const [rightEnemyCount, setRightEnemyCount] = useState<number>(1);\n\n  const totalEnemyCount = leftEnemyCount + rightEnemyCount;\n\n  const leftSlots = leftEnemyType\n    ? leftEnemyCount * ENEMIES[leftEnemyType].size\n    : 0;\n  const rightSlots = rightEnemyType\n    ? rightEnemyCount * ENEMIES[rightEnemyType].size\n    : 0;\n  const totalSlots = 4;\n  const freeSlots = totalSlots - leftSlots - rightSlots;\n\n  const startNewGame = () => {\n    const newGameData = {\n      gameState: NEW_GAME,\n      queue: [],\n      queueIndex: null,\n      playerInterrupt: false,\n      groups: {\n        [PLAYER_GROUP]: {\n          message: '',\n          entities: heroes.map((heroName: HeroesEnum, index) => ({\n            ...HEROES[heroName],\n            id: uuid(),\n            index,\n            status: OK,\n            group: PLAYER_GROUP,\n            leftPosition: `${\n              index === 0 ? 40 : index === 1 ? 60 : index === 2 ? 20 : 80\n            }%`,\n            currentAnimation: { type: IDLE },\n          })),\n        },\n        [LEFT_ENEMY_GROUP]: {\n          type: leftEnemyType,\n          message: '',\n          entities:\n            leftEnemyType && leftEnemyCount\n              ? Array.from(Array(leftEnemyCount)).map((el, index) => ({\n                  ...ENEMIES[leftEnemyType],\n                  id: uuid(),\n                  index,\n                  group: LEFT_ENEMY_GROUP,\n                  status: OK,\n                  leftPosition: `${\n                    (index + 1) * (100 / (leftEnemyCount + rightEnemyCount + 1))\n                  }%`,\n                  currentAnimation: { type: IDLE },\n                }))\n              : [],\n        },\n        [RIGHT_ENEMY_GROUP]: {\n          type: rightEnemyType,\n          message: '',\n          entities:\n            rightEnemyType && rightEnemyCount\n              ? Array.from(Array(rightEnemyCount)).map((el, index) => ({\n                  ...ENEMIES[rightEnemyType],\n                  id: uuid(),\n                  index,\n                  group: RIGHT_ENEMY_GROUP,\n                  status: OK,\n                  leftPosition: `${\n                    (leftEnemyCount + index + 1) *\n                    (100 / (leftEnemyCount + rightEnemyCount + 1))\n                  }%`,\n                  currentAnimation: { type: IDLE },\n                }))\n              : [],\n        },\n      },\n    };\n    dispatch(startNewGameAction(newGameData));\n    history.push('/battle');\n  };\n\n  return (\n    <Window\n      style={{\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        padding: '2rem',\n        zIndex: 10, // TODO: might be worth building a simple dialog controller for windows like this\n        width: '70%',\n      }}\n    >\n      <h3 style={{ marginBottom: 0 }}>Let's go!</h3>\n      --------------\n      <h4 style={{ margin: '1rem 0' }}>Heroes: </h4>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-evenly',\n          textAlign: 'left',\n        }}\n      >\n        <div>\n          <label>In:</label>\n          <br />\n          <select\n            onClick={({ target: { value } }: any) => {\n              // TODO: ts\n              const newHeroes = [...heroes];\n              newHeroes.splice(heroes.indexOf(value as HeroesEnum), 1);\n              setHeroes(newHeroes);\n            }}\n            size={4}\n            style={{ minWidth: 100 }}\n          >\n            {heroes.map((heroName: HeroesEnum) => (\n              <option\n                value={heroName}\n                key={heroName.replace(' ', '-')}\n                style={{ cursor: 'pointer' }}\n              >\n                {heroName}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <label>Out:</label>\n          <br />\n          <select\n            onClick={({ target: { value } }: any) => {\n              // TODO: ts\n              const newHeroes = [...heroes];\n              newHeroes.push(value as HeroesEnum);\n              setHeroes(newHeroes);\n            }}\n            size={4}\n            style={{ minWidth: 100 }}\n          >\n            {Object.values(HeroesEnum)\n              .filter((heroName: HeroesEnum) => heroes.indexOf(heroName) === -1)\n              .map((heroName: HeroesEnum) => (\n                <option\n                  value={heroName}\n                  key={heroName.replace(' ', '-')}\n                  style={{ cursor: 'pointer' }}\n                >\n                  {heroName}\n                </option>\n              ))}\n          </select>\n        </div>\n      </div>\n      --------------\n      <h4 style={{ margin: '1rem 0' }}>Enemies: </h4>\n      <select\n        value={leftEnemyType}\n        onChange={({ target: { value } }: ChangeEvent<HTMLSelectElement>) =>\n          setLeftEnemyType(\n            value === 'None' ? undefined : (value as EnemyTypesEnum)\n          )\n        }\n      >\n        <option>None</option>\n        {Object.values(EnemyTypesEnum)\n          .filter((enemyType) => enemyType !== rightEnemyType)\n          .map((enemyType) => (\n            <option key={enemyType} value={enemyType}>\n              {enemyType}\n            </option>\n          ))}\n      </select>\n      <input\n        type=\"number\"\n        id=\"leftEnemyCount\"\n        name=\"leftEnemyCount\"\n        value={leftEnemyCount}\n        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n          setLeftEnemyCount(Number(e.target.value));\n        }}\n        min={0}\n        max={\n          // TODO: this is bugged\n          leftEnemyType\n            ? (totalSlots - rightSlots) / ENEMIES[leftEnemyType].size\n            : 4\n        }\n        disabled={!leftEnemyType}\n      />\n      <br />\n      <select\n        value={rightEnemyType}\n        onChange={({ target: { value } }: ChangeEvent<HTMLSelectElement>) =>\n          setRightEnemyType(\n            value === 'None' ? undefined : (value as EnemyTypesEnum)\n          )\n        }\n        disabled={\n          !leftEnemyType ||\n          !leftEnemyCount ||\n          (!!leftSlots && !rightSlots && !freeSlots)\n        }\n      >\n        <option>None</option>\n        {Object.values(EnemyTypesEnum)\n          .filter((enemyType) => enemyType !== leftEnemyType)\n          .map((enemyType) => (\n            <option key={enemyType} value={enemyType}>\n              {enemyType}\n            </option>\n          ))}\n      </select>\n      <input\n        type=\"number\"\n        id=\"rightEnemyCount\"\n        name=\"rightEnemyCount\"\n        value={rightEnemyCount}\n        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n          setRightEnemyCount(Number(e.target.value));\n        }}\n        min={0}\n        max={\n          // TODO: this is bugged\n          rightEnemyType\n            ? (totalSlots - leftSlots) / ENEMIES[rightEnemyType].size\n            : 4\n        }\n        disabled={!rightEnemyType}\n      />\n      <br />\n      --------------\n      <Button\n        onClick={startNewGame}\n        disabled={!heroes.length || totalEnemyCount <= 0}\n        pixelMultiplier={pixelMultiplier}\n      >\n        Start\n      </Button>\n      <Link to=\"/\" style={{ textDecoration: 'none' }}>\n        <Button pixelMultiplier={pixelMultiplier}>Cancel</Button>\n      </Link>\n    </Window>\n  );\n};\n\nexport default NewGameMenu;\n","import styled from 'styled-components';\n\nimport { EnemyTypesEnum } from '../../constants';\nimport Window from '../Window';\n\nconst EnemyGroupContainer = styled.div`\n  width: 45%;\n  display: flex;\n  justify-content: flex-end;\n`;\nconst EnemyGroupName = styled(Window)`\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-end;\n  flex: 0 0 70%;\n`;\nconst EnemyMessage = styled(Window)`\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-end;\n  flex: 0 0 30%;\n`;\n\ninterface EnemyGroupProps {\n  type?: EnemyTypesEnum;\n  message: string | number;\n}\n\nconst EnemyGroup = (props: EnemyGroupProps) => {\n  const { type, message } = props;\n\n  return (\n    <EnemyGroupContainer>\n      <EnemyGroupName>{type}</EnemyGroupName>\n      <EnemyMessage>{message}</EnemyMessage>\n    </EnemyGroupContainer>\n  );\n};\n\nexport default EnemyGroup;\n","import { useContext } from 'react';\nimport styled from 'styled-components';\n\nimport EnemyGroup from './EnemyGroup';\nimport { AppStateContext } from '../../state';\nimport {\n  DARKFORCE,\n  LEFT_ENEMY_GROUP,\n  RIGHT_ENEMY_GROUP,\n} from '../../constants';\n\nconst EnemyInfoContainer = styled.section`\n  flex: 0 1 20%;\n  display: flex;\n  top: 0;\n  justify-content: space-between;\n`;\n\nconst EnemyInfo = () => {\n  const [state] = useContext(AppStateContext);\n  const {\n    groups: {\n      [LEFT_ENEMY_GROUP]: leftEnemyGroup,\n      [RIGHT_ENEMY_GROUP]: rightEnemyGroup,\n    },\n  } = state;\n\n  return (\n    <EnemyInfoContainer>\n      {leftEnemyGroup.type !== DARKFORCE && (\n        <>\n          <EnemyGroup\n            type={leftEnemyGroup.type}\n            message={leftEnemyGroup.message}\n          />\n          <EnemyGroup\n            type={rightEnemyGroup.type}\n            message={rightEnemyGroup.message}\n          />\n        </>\n      )}\n    </EnemyInfoContainer>\n  );\n};\n\nexport default EnemyInfo;\n","import React, { useContext } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nimport { AppStateContext } from '../state';\n\nconst dissolveAnimation = (pixelMultiplier: number) => keyframes`\n  from {\n    mask-position: 0 0px;\n  }\n  to {\n    mask-position: 0 -${1216 * pixelMultiplier}px;\n  }\n`;\n\nconst DissolveContainer = styled((props) => <div {...props} />)`\n  width: ${({ width, pixelMultiplier }) => width * pixelMultiplier}px;\n  mask: ${({ dissolving }) =>\n    dissolving ? 'url(./assets/gradient-mask.png)' : 'none'};\n  mask-size: ${({ pixelMultiplier }) => 128 * pixelMultiplier}px auto;\n  mask-position: 0 -${({ pixelMultiplier }) => 1216 * pixelMultiplier}px;\n  animation: ${({ pixelMultiplier }) => dissolveAnimation(pixelMultiplier)} 3s\n    steps(20) forwards 1 ${({ reverse }) => (reverse ? '' : ' reverse')};\n  animation-name: ${({ dissolving, pixelMultiplier }) =>\n    dissolving ? dissolveAnimation(pixelMultiplier) : 'none'};\n`;\n\ninterface DissolveProps {\n  dissolving: boolean;\n  reverse?: boolean;\n  width?: number;\n  style?: object;\n}\n\nconst Dissolve: React.FC<DissolveProps> = ({\n  dissolving,\n  children,\n  reverse,\n  width,\n  style,\n}) => {\n  const [state] = useContext(AppStateContext);\n  const { pixelMultiplier } = state;\n\n  return (\n    <DissolveContainer\n      dissolving={dissolving}\n      reverse={reverse}\n      width={width}\n      style={style}\n      pixelMultiplier={pixelMultiplier}\n    >\n      {children}\n    </DissolveContainer>\n  );\n};\n\nexport default Dissolve;\n","import React, { useContext } from 'react';\nimport styled, { css, keyframes } from 'styled-components';\n\nimport { AppStateContext } from '../state';\n\n// TODO: ts\nconst spriteAnimation = (\n  width: number,\n  frames: any,\n  pixelMultiplier: number\n) => keyframes`\n  ${frames.map(\n    (frame: number, index: number) => `\n    ${(index * (100 / frames.length)).toFixed(2)}% {\n      background-position: ${-width * pixelMultiplier * frame}px;\n    }\n  `\n  )}\n`;\n\n// TODO: ts\nconst SpriteContainer: React.FC<any> = styled.div`\n  background: url('./assets/${({ spriteImg }: any) => spriteImg}.png');\n  background-size: ${({ height, pixelMultiplier }: any) =>\n    `auto ${height * pixelMultiplier}px`};\n  background-repeat: no-repeat;\n  ${({ width, frames, duration, pixelMultiplier }: any) => {\n    if (!Array.isArray(frames)) {\n      return css`\n        background-position: ${-width * pixelMultiplier * frames}px;\n      `;\n    } else if (frames.length === 1) {\n      return css`\n        background-position: ${-width * pixelMultiplier * frames[0]}px;\n      `;\n    } else {\n      return css`\n        animation: ${spriteAnimation(width, frames, pixelMultiplier)}\n          ${duration / 1000}s steps(1) infinite;\n      `;\n    }\n  }}\n`;\n\nconst AnimatedSprite: React.FC<any> = (props) => {\n  const [state] = useContext(AppStateContext);\n  const { pixelMultiplier } = state;\n\n  return <SpriteContainer {...props} pixelMultiplier={pixelMultiplier} />;\n};\n\nexport default AnimatedSprite;\n","import { useContext } from 'react';\nimport styled from 'styled-components';\n\nimport { AppStateContext } from '../../state';\nimport {\n  PLAYER_INPUT,\n  DEAD,\n  IDLE,\n  LEFT_ENEMY_GROUP,\n  RIGHT_ENEMY_GROUP,\n  PLAYER_GROUP,\n  NEW_GAME,\n} from '../../constants';\nimport Window from '../Window';\nimport Dissolve from '../Dissolve';\nimport AnimatedSprite from '../AnimatedSprite';\n\nconst BattleSpriteContainer = styled.section`\n  position: relative;\n  flex: 0 1 100%;\n`;\n\nconst EnemySpriteContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 55%;\n`;\nconst PlayerSpriteContainer = styled.div``;\n\nconst MessageBox = styled(Window)`\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  margin-bottom: 14px;\n`;\n\nconst BattleAnimation = () => {\n  const [state] = useContext(AppStateContext);\n  const { gameState, groups, pixelMultiplier } = state;\n\n  const combinedEnemies = [\n    ...groups[LEFT_ENEMY_GROUP].entities,\n    ...groups[RIGHT_ENEMY_GROUP].entities,\n  ];\n\n  return (\n    <BattleSpriteContainer>\n      <EnemySpriteContainer>\n        {combinedEnemies.map(\n          ({\n            id,\n            name,\n            status,\n            leftPosition,\n            currentAnimation,\n            animations,\n            height,\n            width,\n          }) => {\n            const animationType = currentAnimation.type;\n\n            const { frames = 0, duration = 0 } = animationType\n              ? animations[animationType]\n              : {};\n\n            return (\n              <Dissolve\n                key={id}\n                dissolving={gameState === NEW_GAME}\n                reverse\n                width={width || 64}\n                style={{\n                  position: 'absolute',\n                  bottom: 0,\n                  left: leftPosition,\n                  height: (height || 64) * pixelMultiplier,\n                  width: (width || 64) * pixelMultiplier,\n                  transform: `translateX(-50%)`,\n                }}\n              >\n                <AnimatedSprite\n                  height={height || 64}\n                  width={width || 64}\n                  spriteImg={String(name).toLowerCase()}\n                  frames={frames}\n                  duration={duration}\n                  style={{\n                    visibility: status === DEAD ? 'hidden' : undefined,\n                    height: '100%',\n                    width: '100%',\n                  }}\n                />\n              </Dissolve>\n            );\n          }\n        )}\n      </EnemySpriteContainer>\n\n      <PlayerSpriteContainer>\n        {groups[PLAYER_GROUP].entities.map(\n          (\n            { id, name, status, leftPosition, currentAnimation, animations },\n            index\n          ) => {\n            const animationType = currentAnimation.type;\n            const left = currentAnimation.left;\n\n            const {\n              frames = 0,\n              duration = 0,\n              top = undefined,\n              bottom = undefined,\n            } = animationType ? animations[animationType] : {};\n\n            return (\n              <div\n                key={id}\n                style={{\n                  position: 'absolute',\n                  top: top,\n                  bottom: `${\n                    bottom || (index === 2 || index === 3 ? -24 : 0)\n                  }px`,\n                  left: left || leftPosition,\n                  height: 64 * pixelMultiplier,\n                  width: 64 * pixelMultiplier,\n                  transform: `translateX(-50%)`,\n                }}\n              >\n                <AnimatedSprite\n                  height={64}\n                  width={64}\n                  spriteImg={name.toLowerCase()}\n                  frames={frames}\n                  duration={duration}\n                  style={{\n                    visibility:\n                      status === DEAD ||\n                      (gameState !== NEW_GAME &&\n                        gameState !== PLAYER_INPUT &&\n                        animationType === IDLE)\n                        ? 'hidden'\n                        : undefined,\n                    height: '100%',\n                    width: '100%',\n                  }}\n                />\n              </div>\n            );\n          }\n        )}\n      </PlayerSpriteContainer>\n\n      {Boolean(groups[PLAYER_GROUP].message) && (\n        <MessageBox>{groups[PLAYER_GROUP].message}</MessageBox>\n      )}\n    </BattleSpriteContainer>\n  );\n};\n\nexport default BattleAnimation;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport { AppStateContext } from '../../state';\nimport { actionCreators } from '../../actions';\nimport { NEW_GAME, GAME_WON, GAME_LOST } from '../../constants';\nimport Window from '../Window';\n\nconst { startNewGame: startNewGameAction } = actionCreators;\n\nconst Button = styled((props) => <button {...props} />)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: ${({ pixelMultiplier }) => 8 * pixelMultiplier}px;\n  border: 1px solid;\n  border-radius: 8px;\n  margin: 1rem auto;\n  cursor: pointer;\n`;\n\ninterface GameMenuProps {\n  handleClose: () => void;\n}\n\nconst GameMenu: React.FC<GameMenuProps> = ({ handleClose }) => {\n  const [state, dispatch] = useContext(AppStateContext);\n  const { gameState, pixelMultiplier } = state;\n\n  const replayGame = () => {\n    const newGameData = {\n      ...state,\n      gameState: NEW_GAME,\n      queue: [],\n      queueIndex: null,\n      playerInterrupt: false,\n    };\n\n    dispatch(startNewGameAction(newGameData));\n    handleClose();\n  };\n\n  return (\n    <Window\n      style={{\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        padding: '2rem',\n        zIndex: 10, // TODO: might be worth building a simple dialog controller for windows like this\n      }}\n    >\n      <div>\n        {gameState === GAME_WON\n          ? 'You win! :)'\n          : gameState === GAME_LOST\n          ? 'You lose! :('\n          : 'Had Enough?'}\n      </div>\n      --------------\n      <Button pixelMultiplier={pixelMultiplier} disabled onClick={replayGame}>\n        Replay\n      </Button>\n      {/* TODO: global link/button styles */}\n      <Link to=\"/new-game\" style={{ textDecoration: 'none' }}>\n        <Button pixelMultiplier={pixelMultiplier}>New Game</Button>\n      </Link>\n      <Link to=\"/\" style={{ textDecoration: 'none' }}>\n        <Button pixelMultiplier={pixelMultiplier}>Quit</Button>\n      </Link>\n      {gameState !== GAME_WON && gameState !== GAME_LOST ? (\n        <>\n          --------------\n          <Button pixelMultiplier={pixelMultiplier} onClick={handleClose}>\n            Continue\n          </Button>\n        </>\n      ) : null}\n    </Window>\n  );\n};\n\nexport default GameMenu;\n","import React, { useContext } from 'react';\n\nimport { AppStateContext } from '../state';\n\ninterface SpriteProps {\n  src: string;\n  alt?: string;\n  width: number;\n  height: number;\n}\n\nconst Sprite: React.FC<SpriteProps> = ({ src, alt, width, height }) => {\n  const [{ pixelMultiplier }] = useContext(AppStateContext);\n\n  return (\n    <img\n      src={src}\n      alt={alt || ''}\n      style={{\n        width: width * pixelMultiplier,\n        height: height * pixelMultiplier,\n      }}\n    />\n  );\n};\n\nexport default Sprite;\n","import React, { useContext, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { AppStateContext } from '../../state';\nimport { actionCreators } from '../../actions';\nimport { EntityType } from '../../types';\nimport {\n  EntityActionTypesEnum,\n  ATTACK,\n  TECH,\n  ITEM,\n  DEFEND,\n  LEFT_ENEMY_GROUP,\n  RIGHT_ENEMY_GROUP,\n  ENTITY,\n  GROUP,\n  PLAYER_GROUP,\n  ALL,\n} from '../../constants';\nimport Window from '../Window';\nimport Sprite from '../Sprite';\n\nconst { queueAction } = actionCreators;\n\nconst ActiveHeroWindow = styled(Window)`\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-end;\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translate(-50%, -100%);\n  width: 16%;\n  height: 50%;\n`;\nconst ActionMenu = styled(Window)`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  position: absolute;\n  top: 0;\n  right: 58%;\n  transform: translateY(-100%);\n  width: 34%;\n  height: 73%;\n  padding-top: 1em;\n`;\nconst Button = styled((props) => <button {...props} />)`\n  width: 100%;\n  padding: 0;\n  border: none;\n  outline: none;\n  background: none;\n  color: white;\n`;\nconst TechMenu = styled(Window)`\n  position: absolute;\n  top: 0;\n  right: 58%;\n  transform: translateY(-55%);\n  width: 25%;\n  height: 160%;\n  padding-top: 1em;\n`;\nconst ItemMenu = styled(Window)`\n  position: absolute;\n  top: 0;\n  right: 58%;\n  transform: translateY(-55%);\n  width: 34%;\n  height: 160%;\n  padding-top: 1em;\n`;\nconst TargetMenu = styled((props) => <Window {...props} />)`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  position: absolute;\n  top: 0;\n  left: 58%;\n  transform: translateY(-100%);\n  width: 34%;\n  height: ${({ height }: any) => `${height}`};\n  padding-top: 1em;\n`;\nconst Menu = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n`;\nconst MenuItem = styled((props) => <li {...props} />)`\n  margin: 0 0 0.75em;\n\n  & button {\n    text-align: left;\n    &:before {\n      content: '';\n      display: inline-block;\n      width: ${({ pixelMultiplier }: any) => `${14 * pixelMultiplier}px`};\n      height: ${({ pixelMultiplier }: any) => `${8 * pixelMultiplier}px`};\n      margin-right: 0.25em;\n      margin-bottom: 0.1em;\n      background: orange;\n      background: url('./assets/button-light.png');\n      background-size: ${({ pixelMultiplier }: any) =>\n        `auto ${8 * pixelMultiplier}px`};\n      background-repeat: no-repeat;\n      background-position: ${({ active, pixelMultiplier }: any) =>\n        `${active ? -14 * pixelMultiplier : 0}px`};\n  }\n`;\n\ninterface HeroMenuProps {\n  activeHero: EntityType;\n  handleClose: () => void;\n}\n\nconst HeroMenu: React.FC<HeroMenuProps> = ({ activeHero, handleClose }) => {\n  const [state, dispatch] = useContext(AppStateContext);\n  const {\n    groups: {\n      [PLAYER_GROUP]: playerGroup,\n      [LEFT_ENEMY_GROUP]: leftEnemyGroup,\n      [RIGHT_ENEMY_GROUP]: rightEnemyGroup,\n    },\n    pixelMultiplier,\n  } = state;\n  const [actionType, setActionType] = useState<\n    EntityActionTypesEnum | undefined\n  >();\n  const [itemIndex, setItemIndex] = useState<number | undefined>();\n  const [techIndex, setTechIndex] = useState<number | undefined>();\n\n  const {\n    name,\n    index: activeHeroIndex,\n    equipment: { leftHand, rightHand },\n    inventory,\n    techniques,\n  } = activeHero;\n  const attackTargetType =\n    leftHand && 'twoHanded' in leftHand && leftHand.twoHanded\n      ? leftHand.targetType\n      : leftHand && 'targetType' in leftHand\n      ? leftHand.targetType\n      : rightHand && 'targetType' in rightHand\n      ? rightHand.targetType\n      : undefined;\n  const activeTech =\n    techIndex !== undefined ? techniques[techIndex] : undefined;\n  const activeItem = itemIndex !== undefined ? inventory[itemIndex] : undefined;\n\n  const targetType =\n    actionType === ATTACK\n      ? attackTargetType\n      : actionType === TECH\n      ? activeTech?.targetType\n      : actionType === ITEM\n      ? activeItem?.itemTargetType\n      : undefined;\n\n  const targetAllies =\n    actionType === TECH\n      ? activeTech?.targetAllies\n      : actionType === ITEM\n      ? activeItem?.itemTargetAllies\n      : undefined;\n\n  useEffect(() => {\n    setActionType(undefined);\n    setTechIndex(undefined);\n    setItemIndex(undefined);\n  }, [activeHero]);\n\n  useEffect(() => {\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        if (techIndex !== undefined) {\n          setTechIndex(undefined);\n        } else if (itemIndex !== undefined) {\n          setItemIndex(undefined);\n        } else if (actionType !== undefined) {\n          setActionType(undefined);\n        } else {\n          handleClose();\n        }\n      }\n    };\n    window.addEventListener('keydown', handleEsc);\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  }, [techIndex, itemIndex, actionType, handleClose]);\n\n  useEffect(() => {\n    if (!actionType || !targetType) return;\n\n    // TODO: account for single hero\n    if (\n      targetType === ALL ||\n      (actionType === ATTACK && !rightEnemyGroup?.entities?.length) ||\n      ((actionType === TECH || actionType === ITEM) &&\n        ((targetAllies && targetType === GROUP) ||\n          (!targetAllies && !rightEnemyGroup?.entities?.length)))\n    ) {\n      const target = {\n        group: targetAllies\n          ? PLAYER_GROUP\n          : targetType === ALL && rightEnemyGroup?.entities?.length\n          ? [LEFT_ENEMY_GROUP, RIGHT_ENEMY_GROUP]\n          : LEFT_ENEMY_GROUP,\n        index: targetType === ENTITY ? 0 : undefined,\n      };\n\n      dispatch(\n        queueAction({\n          heroIndex: activeHeroIndex,\n          target: target,\n          type: actionType,\n          techIndex,\n          itemIndex,\n        })\n      );\n      handleClose();\n    }\n  }, [\n    activeHeroIndex,\n    actionType,\n    targetType,\n    targetAllies,\n    rightEnemyGroup,\n    handleClose,\n    dispatch,\n    itemIndex,\n    techIndex,\n    inventory,\n    techniques,\n  ]);\n\n  return (\n    <>\n      <ActiveHeroWindow>{name}</ActiveHeroWindow>\n\n      <ActionMenu>\n        {/* TODO: test this conditional (no equipped weapon) */}\n        {attackTargetType && (\n          <Button\n            onClick={() => {\n              setActionType(ATTACK);\n            }}\n          >\n            <Sprite\n              src=\"./assets/attack-icon.png\"\n              width={16}\n              height={16}\n              alt=\"attack icon\"\n            />\n          </Button>\n        )}\n        <Button\n          onClick={() => {\n            if (techniques.length) {\n              setActionType(TECH);\n            } else {\n              // TODO: display message\n            }\n          }}\n        >\n          <Sprite\n            src=\"./assets/tech-icon.png\"\n            width={16}\n            height={16}\n            alt=\"technique icon\"\n          />\n        </Button>\n        <Button\n          onClick={() => {\n            if (inventory.length) {\n              setActionType(ITEM);\n            } else {\n              // TODO: display message\n            }\n          }}\n        >\n          <Sprite\n            src=\"./assets/item-icon.png\"\n            width={16}\n            height={16}\n            alt=\"item icon\"\n          />\n        </Button>\n        <Button\n          onClick={() => {\n            dispatch(\n              queueAction({\n                heroIndex: activeHeroIndex,\n                type: DEFEND,\n              })\n            );\n            handleClose();\n          }}\n        >\n          <Sprite\n            src=\"./assets/defend-icon.png\"\n            width={16}\n            height={16}\n            alt=\"defend icon\"\n          />\n        </Button>\n      </ActionMenu>\n\n      {actionType === TECH && (\n        <TechMenu>\n          <Menu>\n            {techniques.map((technique, index) => (\n              <MenuItem\n                key={index}\n                pixelMultiplier={pixelMultiplier}\n                active={techIndex === index}\n              >\n                <Button\n                  onClick={() => {\n                    setTechIndex(index);\n                  }}\n                >\n                  {technique.name}\n                </Button>\n              </MenuItem>\n            ))}\n          </Menu>\n        </TechMenu>\n      )}\n\n      {actionType === ITEM && (\n        <ItemMenu>\n          <Menu>\n            {inventory.map((item, index) => (\n              <MenuItem\n                key={index}\n                pixelMultiplier={pixelMultiplier}\n                active={itemIndex === index}\n              >\n                <Button\n                  key={index}\n                  onClick={() => {\n                    setItemIndex(index);\n                  }}\n                >\n                  {item.name}\n                </Button>\n              </MenuItem>\n            ))}\n          </Menu>\n        </ItemMenu>\n      )}\n\n      {actionType &&\n      (targetType === ENTITY || targetType === GROUP) &&\n      !targetAllies &&\n      rightEnemyGroup?.entities?.length ? (\n        <TargetMenu height=\"76%\">\n          <Menu>\n            {/* TODO: only display groups with living entities */}\n            <MenuItem pixelMultiplier={pixelMultiplier}>\n              <Button\n                onClick={() => {\n                  dispatch(\n                    queueAction({\n                      heroIndex: activeHeroIndex,\n                      target: { group: LEFT_ENEMY_GROUP, index: 0 },\n                      type: actionType,\n                      techIndex,\n                      itemIndex,\n                    })\n                  );\n                  handleClose();\n                }}\n              >\n                {leftEnemyGroup?.type}\n              </Button>\n            </MenuItem>\n\n            {/* TODO: only display groups with living entities */}\n            {Boolean(rightEnemyGroup.entities) && (\n              <MenuItem pixelMultiplier={pixelMultiplier}>\n                <Button\n                  onClick={() => {\n                    dispatch(\n                      queueAction({\n                        heroIndex: activeHeroIndex,\n                        target: { group: RIGHT_ENEMY_GROUP, index: 0 },\n                        type: actionType,\n                        techIndex,\n                        itemIndex,\n                      })\n                    );\n                    handleClose();\n                  }}\n                >\n                  {rightEnemyGroup?.type}\n                </Button>\n              </MenuItem>\n            )}\n          </Menu>\n        </TargetMenu>\n      ) : actionType && targetType === ENTITY && targetAllies ? (\n        <TargetMenu height=\"133%\">\n          <Menu>\n            {playerGroup.entities.map((hero, index) => (\n              <MenuItem pixelMultiplier={pixelMultiplier} key={index}>\n                <Button\n                  onClick={() => {\n                    dispatch(\n                      queueAction({\n                        heroIndex: activeHeroIndex,\n                        target: { group: PLAYER_GROUP, index },\n                        type: actionType,\n                        techIndex,\n                        itemIndex,\n                      })\n                    );\n                    handleClose();\n                  }}\n                >\n                  {hero.name}\n                </Button>\n              </MenuItem>\n            ))}\n          </Menu>\n        </TargetMenu>\n      ) : null}\n    </>\n  );\n};\n\nexport default HeroMenu;\n","import styled from 'styled-components';\n\nimport { EntityType } from '../../types';\nimport Window from '../Window';\nimport Sprite from '../Sprite';\n\nconst HeroCardContainer = styled(Window)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex: 0 1 auto;\n  width: 21%;\n`;\n\nconst HeroButton = styled((props) => <button {...props} />)`\n  background: none;\n  width: 100%;\n  height: 100%;\n  border: none;\n  color: inherit;\n  text-align: left;\n`;\n\ninterface HeroCardProps {\n  hero: EntityType;\n  index: number;\n  handleSelect?: (index: number | undefined) => void;\n}\n\nconst HeroCard = ({ hero, index, handleSelect }: HeroCardProps) => {\n  const { hp, tp, name, queuedAction } = hero || {};\n\n  return (\n    <HeroCardContainer\n      style={{ order: index === 0 ? 1 : index === 1 ? 2 : index === 2 ? 0 : 3 }}\n    >\n      {Boolean(hero) ? (\n        <HeroButton\n          onClick={() => {\n            if (typeof handleSelect === 'function') {\n              handleSelect(index);\n            }\n          }}\n        >\n          <div\n            style={{\n              width: '100%',\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n            }}\n          >\n            <div>\n              {hp <= 0 ? (\n                <Sprite\n                  src={`./assets/gravestone.png`}\n                  width={16}\n                  height={16}\n                  alt=\"grave icon\"\n                />\n              ) : (\n                <>\n                  HP\n                  <br />\n                  TP\n                </>\n              )}\n            </div>\n            <div>\n              {hp > 0 ? hp : 0}\n              <br />\n              {tp}\n            </div>\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'flex-end',\n            }}\n          >\n            <Sprite\n              src={`./assets/${String(\n                queuedAction.type\n              ).toLowerCase()}-icon.png`}\n              width={16}\n              height={16}\n              alt=\"action icon\"\n            />\n            {name}\n          </div>\n        </HeroButton>\n      ) : (\n        <Sprite\n          src=\"./assets/blank-hero-icon.png\"\n          width={32}\n          height={32}\n          alt=\"blank hero icon\"\n        />\n      )}\n    </HeroCardContainer>\n  );\n};\n\nexport default HeroCard;\n","import { useState, useContext } from 'react';\nimport styled from 'styled-components';\n\nimport { AppStateContext } from '../../state';\nimport { actionCreators } from '../../actions';\nimport { generateQueue } from '../../utils';\nimport {\n  INIT,\n  PLAYER_INPUT,\n  EXECUTING,\n  GAME_WON,\n  GAME_LOST,\n  PLAYER_GROUP,\n  LEFT_ENEMY_GROUP,\n  RIGHT_ENEMY_GROUP,\n  NEW_GAME,\n  POST_EXECUTION,\n} from '../../constants';\nimport GameMenu from './GameMenu';\nimport HeroMenu from './HeroMenu';\nimport Window from '../Window';\nimport HeroCard from './HeroCard';\nimport AnimatedSprite from '../AnimatedSprite';\n\nconst { startNewRound: startNewRoundAction, setPlayerInterrupt } =\n  actionCreators;\n\nconst HeroInfoContainer = styled.section`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  flex: 0 0 22%;\n  height: 22%;\n`;\n\nconst PlayerButtons = styled(Window)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 16%;\n  order: 1;\n`;\n\nconst PlayerButton = styled.button`\n  background: none;\n  border: none;\n  outline: none;\n  padding: 0;\n  color: white;\n`;\n\nconst PlayerInfo = () => {\n  const [state, dispatch] = useContext(AppStateContext);\n  const { gameState, queueIndex, playerInterrupt, groups, pixelMultiplier } =\n    state;\n  const [activeHeroIndex, setActiveHeroIndex] = useState<number | undefined>();\n  const [gameMenuOpen, setGameMenuOpen] = useState<boolean>(false);\n\n  const startNewRound = () => {\n    const newQueue = generateQueue([\n      ...groups[PLAYER_GROUP].entities,\n      ...groups[LEFT_ENEMY_GROUP].entities,\n      ...groups[RIGHT_ENEMY_GROUP].entities,\n    ]);\n\n    dispatch(startNewRoundAction(newQueue));\n  };\n\n  const handleSelectHero = (index: number | undefined) => {\n    setActiveHeroIndex(activeHeroIndex === index ? undefined : index);\n  };\n\n  return (\n    <HeroInfoContainer>\n      {Array.from(Array(4)).map((el, index) => {\n        const hero = groups[PLAYER_GROUP].entities[index];\n\n        return (\n          <HeroCard\n            key={hero?.name || `blank-hero-${index}`}\n            hero={hero}\n            index={index}\n            handleSelect={\n              gameState === INIT || gameState === PLAYER_INPUT\n                ? handleSelectHero\n                : undefined\n            }\n          />\n        );\n      })}\n\n      {activeHeroIndex !== undefined && (\n        <HeroMenu\n          activeHero={groups[PLAYER_GROUP].entities[activeHeroIndex]}\n          handleClose={() => {\n            setActiveHeroIndex(undefined);\n          }}\n        />\n      )}\n\n      <PlayerButtons>\n        <PlayerButton\n          disabled={\n            activeHeroIndex !== undefined ||\n            queueIndex !== null ||\n            gameState === INIT ||\n            gameState === NEW_GAME ||\n            gameState === GAME_WON ||\n            gameState === GAME_LOST\n          }\n          onClick={startNewRound}\n        >\n          <div\n            style={{\n              height: 8 * pixelMultiplier,\n              width: 14 * pixelMultiplier,\n              margin: '0 auto',\n            }}\n          >\n            <AnimatedSprite\n              height={8}\n              width={14}\n              spriteImg={'button-light'}\n              frames={\n                queueIndex !== null ||\n                gameState === GAME_WON ||\n                gameState === GAME_LOST\n                  ? [1]\n                  : [0]\n              }\n              style={{\n                height: '100%',\n                width: '100%',\n              }}\n            />\n          </div>\n          <div>FGHT</div>\n        </PlayerButton>\n        <PlayerButton\n          disabled={\n            playerInterrupt ||\n            queueIndex === null ||\n            (gameState !== EXECUTING && gameState !== POST_EXECUTION)\n          }\n          onClick={() => {\n            dispatch(setPlayerInterrupt(true));\n          }}\n        >\n          <div\n            style={{\n              height: 8 * pixelMultiplier,\n              width: 14 * pixelMultiplier,\n              margin: '0 auto',\n            }}\n          >\n            <AnimatedSprite\n              height={8}\n              width={14}\n              spriteImg={'button-light'}\n              frames={\n                playerInterrupt ||\n                queueIndex === null ||\n                (gameState !== EXECUTING && gameState !== POST_EXECUTION)\n                  ? [1]\n                  : [0]\n              }\n              style={{\n                height: '100%',\n                width: '100%',\n              }}\n            />\n          </div>\n          <div>STGY</div>\n        </PlayerButton>\n        <button\n          onClick={() => {\n            dispatch(setPlayerInterrupt(true));\n            setGameMenuOpen(true);\n          }}\n        >\n          Exit\n        </button>\n      </PlayerButtons>\n\n      {(gameMenuOpen ||\n        gameState === INIT ||\n        gameState === GAME_WON ||\n        gameState === GAME_LOST) && (\n        <GameMenu\n          handleClose={() => {\n            setGameMenuOpen(false);\n          }}\n        />\n      )}\n    </HeroInfoContainer>\n  );\n};\n\nexport default PlayerInfo;\n","import { useContext, useState, useEffect } from 'react';\nimport styled, { keyframes, css } from 'styled-components';\n\nimport { AppStateContext } from '../../state';\nimport EnemyInfo from './EnemyInfo';\nimport BattleAnimation from './BattleAnimation';\nimport HeroInfo from './HeroInfo';\nimport { HURT, PLAYER_GROUP } from '../../constants';\n\nconst BattleContainer = styled.div`\n  margin: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n`;\n\nconst flashAnimation = keyframes`\n  0% {\n    background-position: 0%;\n  }\n  50% {\n    background-position: -100%;\n  }\n`;\n\nconst BattleWindow = styled((props: any) => <div {...props} />)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  aspect-ratio: 4 / 3;\n  width: 133.33vmin;\n  overflow: hidden;\n  outline: 4px solid #000088;\n  background: url('./assets/battle-bg.png');\n  background-size: auto 100%;\n  ${({ bgFlash }: any) => {\n    if (bgFlash) {\n      return css`\n        animation: ${flashAnimation} 0.35s steps(1) infinite;\n      `;\n    }\n  }}\n`;\n\nconst Battle = () => {\n  const [state] = useContext(AppStateContext);\n  const {\n    groups: {\n      [PLAYER_GROUP]: { entities: heroes },\n    },\n  } = state;\n\n  const [bgFlash, setBgFlash] = useState(false);\n\n  useEffect(() => {\n    if (heroes.find((entity) => entity.currentAnimation.type === HURT)) {\n      setBgFlash(true);\n    } else {\n      setBgFlash(false);\n    }\n  }, [heroes]);\n\n  return (\n    <BattleContainer>\n      <BattleWindow bgFlash={bgFlash}>\n        <EnemyInfo />\n        <BattleAnimation />\n        <HeroInfo />\n      </BattleWindow>\n    </BattleContainer>\n  );\n};\n\nexport default Battle;\n","import Battle from './Battle';\n\nexport default Battle;\n","import { useContext, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { AppStateContext } from '../state';\nimport { actionCreators, thunks } from '../actions';\nimport {\n  LEFT_ENEMY_GROUP,\n  NEW_GAME,\n  RIGHT_ENEMY_GROUP,\n  ATTACK,\n  TECH,\n  ITEM,\n  INIT,\n  PLAYER_INPUT,\n  POST_EXECUTION,\n  OK,\n} from '../constants';\nimport { generateQueue } from '../utils';\nimport Battle from '../components/Battle';\nimport { itemThunk, techThunk } from '../actions/thunks';\n\nconst {\n  startNewRound: startNewRoundAction,\n  setQueueIndex,\n  incrementQueueIndex,\n  setGameState,\n  setPlayerInterrupt,\n} = actionCreators;\nconst { postExecutionThunk, attackThunk, newGameThunk } = thunks;\n\nconst BattlePage = () => {\n  const history = useHistory();\n  const [state, dispatch] = useContext(AppStateContext);\n  const { gameState, groups, queue, queueIndex, playerInterrupt } = state;\n  const prevQueueIndex = useRef(queueIndex);\n  const prevGameState = useRef(gameState);\n\n  useEffect(() => {\n    if (gameState === INIT) {\n      history.push('/');\n    }\n  }, [gameState, history]);\n\n  useEffect(() => {\n    if (queueIndex !== null && queueIndex !== prevQueueIndex.current) {\n      prevQueueIndex.current = queueIndex;\n\n      if (queue[queueIndex]) {\n        const { type, actor, target, techIndex, itemIndex } = queue[queueIndex];\n\n        const { group: actorGroup, index: actorIndex } = actor;\n        const actorEntity = groups[actorGroup].entities[actorIndex];\n\n        // TODO: also check status (paralyzed, etc.)\n        if (actorEntity.hp <= 0 || actorEntity.status !== OK) {\n          dispatch(incrementQueueIndex());\n          return;\n        }\n\n        switch (type) {\n          case ATTACK: {\n            dispatch(attackThunk(actor, target));\n            break;\n          }\n          case TECH: {\n            // TODO: figure out a better way to guarantee techIndex/itemIndex exists for these types of action (maybe need more specific action types that extend the generic EntityActionType)\n            if (techIndex !== undefined) {\n              dispatch(techThunk(actor, target, techIndex));\n            }\n            break;\n          }\n          case ITEM: {\n            if (itemIndex !== undefined) {\n              dispatch(itemThunk(actor, target, itemIndex));\n            }\n            break;\n          }\n          default: {\n            dispatch(incrementQueueIndex());\n          }\n        }\n\n        // TODO: determine whether or not to update/reset queuedAction for actor\n        // - reset to ATTACK/DEFEND if ITEM or insufficient TP to execute queued TECH\n\n        // TODO: ideally we would be able to wait for actionCreator to finish and then dispatch gameState: POST_EXECUTION here (should be doable since no new state is needed)\n      } else {\n        if (playerInterrupt) {\n          dispatch(setGameState(PLAYER_INPUT));\n          dispatch(setQueueIndex(null));\n          dispatch(setPlayerInterrupt(false));\n        } else {\n          dispatch(setQueueIndex(0));\n        }\n      }\n    }\n  }, [queueIndex, gameState, queue, groups, playerInterrupt, dispatch]);\n\n  useEffect(() => {\n    if (gameState === NEW_GAME) {\n      dispatch(newGameThunk());\n    } else if (gameState !== prevGameState.current) {\n      // enemy pre-emptive attack chance\n      if (prevGameState.current === NEW_GAME) {\n        // TODO: maybe check speed or luck or something\n        if (Math.random() > 0.9) {\n          const newQueue = generateQueue([\n            ...groups[LEFT_ENEMY_GROUP].entities,\n            ...groups[RIGHT_ENEMY_GROUP].entities,\n          ]);\n\n          dispatch(startNewRoundAction(newQueue));\n          dispatch(setPlayerInterrupt(true));\n        } else {\n          dispatch(setGameState(PLAYER_INPUT));\n        }\n      } else if (gameState === POST_EXECUTION) {\n        dispatch(postExecutionThunk());\n      }\n\n      prevGameState.current = gameState;\n    }\n  }, [gameState, groups, dispatch]);\n\n  return <Battle />;\n};\n\nexport default BattlePage;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport Window from '../components/Window';\nimport Sprite from '../components/Sprite';\n\nconst Container = styled.div`\n  position: absolute;\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\nconst Content = styled.div`\n  margin: 0 auto;\n  width: 100%;\n`;\nconst ContactInfo = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  margin: 0 0 1em;\n`;\nconst IconLink = styled.a`\n  margin: 0 1rem 1rem;\n  display: inline-block;\n  cursor: pointer;\n`;\n\nconst About = () => (\n  <Container>\n    <h1 style={{ marginBottom: 0 }}>Phantasy Star 2</h1>\n    <h2>- Battle Simulator -</h2>\n\n    <Content>\n      <p style={{ maxWidth: 800, margin: '2rem auto', padding: '0 1rem' }}>\n        Homage to the fighting system from the 1989 RPG classic{' '}\n        <i>Phantasy Star 2</i> for the Sega Genesis console.\n      </p>\n\n      <ContactInfo>\n        <Window style={{ width: '30%' }}>\n          <h3>Will Ashe</h3>\n          <IconLink\n            href=\"https://willashe.com/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Sprite\n              src=\"./assets/website-icon.png\"\n              width={16}\n              height={16}\n              alt=\"website icon\"\n            />\n          </IconLink>\n          <IconLink\n            href=\"https://github.com/willashe\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Sprite\n              src=\"./assets/github-icon.png\"\n              width={16}\n              height={16}\n              alt=\"GitHub icon\"\n            />\n          </IconLink>\n          <IconLink\n            href=\"https://www.linkedin.com/in/will-ashe/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Sprite\n              src=\"./assets/linkedin-icon.png\"\n              width={16}\n              height={16}\n              alt=\"LinkedIn icon\"\n            />\n          </IconLink>\n        </Window>\n        <Window style={{ width: '30%' }}>\n          <h3>Tomas Ortiz</h3>\n          <IconLink\n            href=\"https://github.com/tomas395\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Sprite\n              src=\"./assets/github-icon.png\"\n              width={16}\n              height={16}\n              alt=\"GitHub icon\"\n            />\n          </IconLink>\n          <IconLink\n            href=\"https://www.linkedin.com/in/tomas-ortiz-15b7a5199/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Sprite\n              src=\"./assets/linkedin-icon.png\"\n              width={16}\n              height={16}\n              alt=\"LinkedIn icon\"\n            />\n          </IconLink>\n        </Window>\n      </ContactInfo>\n      <Link to=\"/\">Home</Link>\n    </Content>\n  </Container>\n);\n\nexport default About;\n","import { useContext, useEffect } from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport styled, { keyframes } from 'styled-components';\n\nimport './Reset.css';\nimport './App.css';\nimport { AppStateContext } from './state';\nimport Title from './pages/Title';\nimport NewGame from './pages/NewGame';\nimport Battle from './pages/Battle';\nimport About from './pages/About';\nimport { actionCreators } from './actions';\n\nconst { setPixelMultiplier } = actionCreators;\n\nconst slideAnimation = (pixelMultiplier: number) => keyframes`\n  0% {\n    background-position: 0px;\n  }\n  100% {\n    background-position: ${320 * pixelMultiplier}px;\n  }\n`;\n\nconst AppContainer = styled((props) => <main {...props} />)`\n  color: #e5e4e2;\n  text-align: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  flex-direction: column;\n  background: url('./assets/star-bg.png');\n  background-size: ${({ pixelMultiplier }) => 320 * pixelMultiplier}px\n    ${({ pixelMultiplier }) => 240 * pixelMultiplier}px;\n  background-repeat: repeat;\n  font-size: ${({ pixelMultiplier }) => 8 * pixelMultiplier}px;\n  animation: ${({ pixelMultiplier }) => slideAnimation(pixelMultiplier)} 60s\n    linear infinite;\n  animation-fill-mode: forwards;\n`;\n\nexport default function App() {\n  const [state, dispatch] = useContext(AppStateContext);\n  const { pixelMultiplier } = state;\n\n  useEffect(() => {\n    const handleResize = () => {\n      const multiplier =\n        window.innerWidth / window.innerHeight >= 4 / 3\n          ? window.innerHeight / 240\n          : window.innerWidth / 320;\n      dispatch(setPixelMultiplier(multiplier));\n    };\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [dispatch]);\n\n  return (\n    <Router>\n      <AppContainer pixelMultiplier={pixelMultiplier}>\n        <Switch>\n          <Route exact path=\"/\" component={Title} />\n          <Route exact path=\"/new-game\" component={NewGame} />\n          <Route exact path=\"/battle\" component={Battle} />\n          <Route exact path=\"/about\" component={About} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </AppContainer>\n    </Router>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Reset.css';\nimport { AppStateProvider } from './state';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppStateProvider>\n      <App />\n    </AppStateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}